;; sequence(s): A313780
;; terms: 1 5 10 15 21 26 31 36 41 46 51 57 62 67 72 77 82 87 93 98
;; small program: loop(((((0 - x) div (2 + (2 + 2))) + y) + y) + y, x + x, 1)
;; fast program: ((2 * (x + x)) + ((1 + (2 + x)) div (1 + (2 + (2 + 2))))) + (if x <= 0 then 1 else x)
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (+ (+ (divf (- 0 x) (+ 2 (+ 2 2))) y) y) y))))
(assert (forall ((x Int)) (= (g0 x) (+ x x))))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (* 2 (+ x x)) (divf (+ 1 (+ 2 x)) (+ 1 (+ 2 (+ 2 2))))) (ite (<= x 0) 1 x)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
