;; sequence(s): A28440
;; terms: 10 20 30 40 50 60 70 80 90 101 111 121 131 141 151 161 171 181 191 201
;; small program: ((if (x - (2 * (2 + 2))) <= 0 then 1 else 2) + x) + loop((x + x) + x, 2, 1 + x)
;; fast program: (((1 + 2) * ((1 + 2) * (1 + x))) + (if (x - (2 * (2 + 2))) <= 0 then 1 else 2)) + x
(set-logic UFNIA)
(declare-fun f0 (Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f0 x) (+ (+ x x) x))))
(assert (= g0 2))
(assert (forall ((x Int)) (= (h0 x) (+ 1 x))))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 g0 (h0 x)))))
(assert (forall ((x Int)) (= (small x) (+ (+ (ite (<= (- x (* 2 (+ 2 2))) 0) 1 2) x) (v0 x)))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (* (+ 1 2) (* (+ 1 2) (+ 1 x))) (ite (<= (- x (* 2 (+ 2 2))) 0) 1 2)) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
