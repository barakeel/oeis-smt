;; sequence(s): A172327
;; terms: 0 5 11 16 22 27 33 38 44 49 55 61 66 72 77 83 88 94 99 105
;; small program: ((loop((2 * (x * x)) + x, 2, 2) * x) + x) div loop(2 + (x * x), 2, 2)
;; fast program: (((((x + x) div (1 + (2 + (2 * (2 * (2 + 2)))))) + x) div 2) + (2 * (x + x))) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 () Int)
(declare-fun f1 (Int) Int)
(declare-fun g1 () Int)
(declare-fun h1 () Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 () Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f0 x) (+ (* 2 (* x x)) x))))
(assert (= g0 2))
(assert (= h0 2))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (= v0 (u0 g0 h0)))
(assert (forall ((x Int)) (= (f1 x) (+ 2 (* x x)))))
(assert (= g1 2))
(assert (= h1 2))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y))))))
(assert (= v1 (u1 g1 h1)))
(assert (forall ((x Int)) (= (small x) (divf (+ (* v0 x) x) v1))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (divf (+ (divf (+ x x) (+ 1 (+ 2 (* 2 (* 2 (+ 2 2)))))) x) 2) (* 2 (+ x x))) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
