;; sequence(s): A109051
;; terms: 0 10 10 30 20 10 30 70 40 90 10 110 60 130 70 30 80 170 90 190
;; small program: (((if (x mod (1 + (2 + 2))) <= 0 then 0 else 2) * 2) + 1) * (((x mod 2) + 1) * x)
;; fast program: (((if (x mod (1 + (2 + 2))) <= 0 then 0 else 2) * 2) + 1) * loop(x + x, x mod 2, x)
(set-logic UFNIA)
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun small (Int) Int)
(declare-fun f0 (Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (small x) (* (+ (* (ite (<= (modf x (+ 1 (+ 2 2))) 0) 0 2) 2) 1) (* (+ (modf x 2) 1) x)))))
(assert (forall ((x Int)) (= (f0 x) (+ x x))))
(assert (forall ((x Int)) (= (g0 x) (modf x 2))))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (forall ((x Int)) (= (fast x) (* (+ (* (ite (<= (modf x (+ 1 (+ 2 2))) 0) 0 2) 2) 1) (v0 x)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
