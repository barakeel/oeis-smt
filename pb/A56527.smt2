;; sequence(s): A56527
;; terms: 2 4 5 7 11 13 14 16 20 22 23 25 29 31 32 34 38 40 41 43
;; small program: 1 + ((loop(y - x, x div 2, 1) + x) + x)
;; fast program: 2 + ((((1 + 2) * (x div (2 + 2))) + x) - ((0 - x) div 2))
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (- y x))))
(assert (forall ((x Int)) (= (g0 x) (divf x 2))))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (+ 1 (+ (+ (v0 x) x) x)))))
(assert (forall ((x Int)) (= (fast x) (+ 2 (- (+ (* (+ 1 2) (divf x (+ 2 2))) x) (divf (- 0 x) 2))))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
