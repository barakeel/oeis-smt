;; sequence(s): A186290
;; terms: 2 3 5 7 9 11 12 14 16 18 20 21 23 25 27 29 31 32 34 36
;; small program: (((((((((loop((x div 2) + x, 2, x) div 2) + x) div 2) div 2) div 2) - x) div (2 + 2)) + 2) + x) + x
;; fast program: (((((((((loop(2, 2 - x, x) - 2) div (1 + 2)) + x) div (1 + (2 + 2))) + x) div 2) + x) div 2) + x) + 2
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun f1 () Int)
(declare-fun g1 (Int) Int)
(declare-fun h1 (Int) Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f0 x) (+ (divf x 2) x))))
(assert (= g0 2))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 g0 (h0 x)))))
(assert (forall ((x Int)) (= (small x) (+ (+ (+ (divf (- (divf (divf (divf (+ (divf (v0 x) 2) x) 2) 2) 2) x) (+ 2 2)) 2) x) x))))
(assert (= f1 2))
(assert (forall ((x Int)) (= (g1 x) (- 2 x))))
(assert (forall ((x Int)) (= (h1 x) x)))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y f1))))
(assert (forall ((x Int)) (= (v1 x) (u1 (g1 x) (h1 x)))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (divf (+ (divf (+ (divf (+ (divf (- (v1 x) 2) (+ 1 2)) x) (+ 1 (+ 2 2))) x) 2) x) 2) x) 2))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
