;; sequence(s): A182531
;; terms: 0 1 3 4 6 9 12 16 20 25 30 36 42 49 56 64 72 81 90 100
;; small program: ((x div 2) * loop(y, (x - 1) div 2, 1)) + x
;; fast program: (1 + ((2 + x) * x)) div (2 + (if (x - 2) <= 0 then 1 else 2))
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) y)))
(assert (forall ((x Int)) (= (g0 x) (divf (- x 1) 2))))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (+ (* (divf x 2) (v0 x)) x))))
(assert (forall ((x Int)) (= (fast x) (divf (+ 1 (* (+ 2 x) x)) (+ 2 (ite (<= (- x 2) 0) 1 2))))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
