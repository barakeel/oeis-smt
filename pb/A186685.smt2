;; sequence(s): A186685
;; terms: 0 1 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
;; small program: ((if (x - 2) <= 0 then (2 * x) else 1) * x) - x
;; fast program: loop((y + x) * y, if (x - 2) <= 0 then x else 0, 0)
(set-logic UFNIA)
(declare-fun small (Int) Int)
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (small x) (- (* (ite (<= (- x 2) 0) (* 2 x) 1) x) x))))
(assert (forall ((x Int) (y Int)) (= (f0 x y) (* (+ y x) y))))
(assert (forall ((x Int)) (= (g0 x) (ite (<= (- x 2) 0) x 0))))
(assert (= h0 0))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (fast x) (v0 x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
