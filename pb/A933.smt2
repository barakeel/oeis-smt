;; sequence(s): A933
;; terms: 0 0 0 0 1 1 1 2 3 4 5 6 8 10 11 13 16 18 20 23
;; small program: (1 + (loop(x + y, (x - 2) - 2, x) div 2)) div (1 + 2)
;; fast program: ((((((((2 - x) * (((2 - x) * x) div (1 + 2))) + x) div (1 + x)) + x) + 2) - x) div 2) div 2
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ x y))))
(assert (forall ((x Int)) (= (g0 x) (- (- x 2) 2))))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (forall ((x Int)) (= (small x) (divf (+ 1 (divf (v0 x) 2)) (+ 1 2)))))
(assert (forall ((x Int)) (= (fast x) (divf (divf (- (+ (+ (divf (+ (* (- 2 x) (divf (* (- 2 x) x) (+ 1 2))) x) (+ 1 x)) x) 2) x) 2) 2))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
