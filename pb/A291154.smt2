;; sequence(s): A291154
;; terms: 1 3 5 7 9 12 14 16 18 19 21 23 25 27 30 32 34 36
;; small program: 1 + (((loop(x div (1 + 2), 2, x + x) mod 2) + x) + x)
;; fast program: ((if (((x mod (1 + (2 * (2 + 2)))) - 2) - 2) <= 0 then 1 else 2) + x) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f0 x) (divf x (+ 1 2)))))
(assert (= g0 2))
(assert (forall ((x Int)) (= (h0 x) (+ x x))))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 g0 (h0 x)))))
(assert (forall ((x Int)) (= (small x) (+ 1 (+ (+ (modf (v0 x) 2) x) x)))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (ite (<= (- (- (modf x (+ 1 (* 2 (+ 2 2)))) 2) 2) 0) 1 2) x) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
