;; sequence(s): A232832
;; terms: 1 2 4 5 7 8 13 15
;; small program: 1 + ((x div loop(1, (x div 2) - 2, 2)) + x)
;; fast program: 1 + ((if (x - (1 + (2 + 2))) <= 0 then (x div 2) else x) + x)
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 () Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (= f0 1))
(assert (forall ((x Int)) (= (g0 x) (- (divf x 2) 2))))
(assert (= h0 2))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y f0))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (+ 1 (+ (divf x (v0 x)) x)))))
(assert (forall ((x Int)) (= (fast x) (+ 1 (+ (ite (<= (- x (+ 1 (+ 2 2))) 0) (divf x 2) x) x)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
