;; sequence(s): A311586
;; terms: 1 4 8 12 18 22 26 30 34 38 42 48 52 56 60 64 68 72 78 82
;; small program: ((loop((((x + y) div (2 + 2)) + 1) div 2, x, 1) + x) + x) * (if x <= 0 then 1 else 2)
;; fast program: ((2 * (((1 + (2 + x)) div (1 + (2 + (2 + 2)))) + x)) + (if x <= 0 then 1 else x)) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (divf (+ (divf (+ x y) (+ 2 2)) 1) 2))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (* (+ (+ (v0 x) x) x) (ite (<= x 0) 1 2)))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (* 2 (+ (divf (+ 1 (+ 2 x)) (+ 1 (+ 2 (+ 2 2)))) x)) (ite (<= x 0) 1 x)) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
