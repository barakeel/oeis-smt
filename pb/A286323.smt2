;; sequence(s): A286323
;; terms: 1 3 4 6 7 9 10 12 13 15 17 18 20 21 23 24 26 27 29 30
;; small program: (1 + (((((x - ((x div 2) div 2)) div (2 * (2 + 2))) + 1) + x) div 2)) + x
;; fast program: ((1 + x) * loop((2 + x) * x, 1, 1 + (2 * (2 + 2)))) div loop((x * x) * x, 1, 2 + 2)
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun small (Int) Int)
(declare-fun f0 (Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 () Int)
(declare-fun f1 (Int) Int)
(declare-fun g1 () Int)
(declare-fun h1 () Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 () Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (small x) (+ (+ 1 (divf (+ (+ (divf (- x (divf (divf x 2) 2)) (* 2 (+ 2 2))) 1) x) 2)) x))))
(assert (forall ((x Int)) (= (f0 x) (* (+ 2 x) x))))
(assert (= g0 1))
(assert (= h0 (+ 1 (* 2 (+ 2 2)))))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (= v0 (u0 g0 h0)))
(assert (forall ((x Int)) (= (f1 x) (* (* x x) x))))
(assert (= g1 1))
(assert (= h1 (+ 2 2)))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y))))))
(assert (= v1 (u1 g1 h1)))
(assert (forall ((x Int)) (= (fast x) (divf (* (+ 1 x) v0) v1))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
