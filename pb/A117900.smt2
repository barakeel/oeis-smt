;; sequence(s): A117900
;; terms: 1 1 3 3 3 5 6 4 8 8 6 10 11 7 13 13 9 15 16 10
;; small program: (((((1 - ((x mod (1 + 2)) mod 2)) * x) + 1) div (1 + 2)) + 1) + (x div 2)
;; fast program: ((((loop(y - x, x mod (1 + 2), 1 + x) div 2) + x) + x) div (1 + 2)) + 1
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun small (Int) Int)
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (small x) (+ (+ (divf (+ (* (- 1 (modf (modf x (+ 1 2)) 2)) x) 1) (+ 1 2)) 1) (divf x 2)))))
(assert (forall ((x Int) (y Int)) (= (f0 x y) (- y x))))
(assert (forall ((x Int)) (= (g0 x) (modf x (+ 1 2)))))
(assert (forall ((x Int)) (= (h0 x) (+ 1 x))))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (forall ((x Int)) (= (fast x) (+ (divf (+ (+ (divf (v0 x) 2) x) x) (+ 1 2)) 1))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
