;; sequence(s): A192793
;; terms: 108 360 900 1872 3420 5688 8820 12960 18252 24840 32868 42480 53820 67032 82260 99648 119340 141480 166212 193680
;; small program: (((loop2(((y * y) * y) + x, 2 + y, 2, 1, x) + x) * 2) * (1 + 2)) * 2
;; fast program: (1 + (2 * (2 + (2 + ((2 + x) * x))))) * (2 * ((1 + 2) * (2 + (x + x))))
(set-logic UFNIA)
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int Int) Int)
(declare-fun h0 () Int)
(declare-fun i0 () Int)
(declare-fun j0 (Int) Int)
(declare-fun u0 (Int Int Int) Int)
(declare-fun v0 (Int Int Int) Int)
(declare-fun w0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (* (* y y) y) x))))
(assert (forall ((x Int) (y Int)) (= (g0 x y) (+ 2 y))))
(assert (= h0 2))
(assert (= i0 1))
(assert (forall ((x Int)) (= (j0 x) x)))
(assert (forall ((x Int) (y Int) (z Int)) (= (u0 x y z) (ite (<= x 0) y (f0 (u0 (- x 1) y z) (v0 (- x 1) y z))))))
(assert (forall ((x Int) (y Int) (z Int)) (= (v0 x y z) (ite (<= x 0) z (g0 (u0 (- x 1) y z) (v0 (- x 1) y z))))))
(assert (forall ((x Int)) (= (w0 x) (u0 h0 i0 (j0 x)))))
(assert (forall ((x Int)) (= (small x) (* (* (* (+ (w0 x) x) 2) (+ 1 2)) 2))))
(assert (forall ((x Int)) (= (fast x) (* (+ 1 (* 2 (+ 2 (+ 2 (* (+ 2 x) x))))) (* 2 (* (+ 1 2) (+ 2 (+ x x))))))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
