;; sequence(s): A106387
;; terms: 4 6 15 17 26 28 37 39 48 50 59 61 70 72 81 83 92 94 103 105
;; small program: 2 + (((2 * (x + x)) + loop(y - x, x, 2)) + x)
;; fast program: (2 * (2 + x)) + ((1 + (2 + (2 + 2))) * (x div 2))
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (- y x))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 2))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (+ 2 (+ (+ (* 2 (+ x x)) (v0 x)) x)))))
(assert (forall ((x Int)) (= (fast x) (+ (* 2 (+ 2 x)) (* (+ 1 (+ 2 (+ 2 2))) (divf x 2))))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
