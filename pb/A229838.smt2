;; sequence(s): A229838
;; terms: 3 5 7 8 9 11 13 15 16 17 19 21 23 24 25 27 29 31 32 33
;; small program: loop(((((x * y) - 1) div (2 + (2 + y))) + 2) + x, 2, x)
;; fast program: ((((x - ((0 - x) div (1 + (2 + 2)))) * (2 + 2)) div (1 + 2)) + 1) + 2
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (+ (divf (- (* x y) 1) (+ 2 (+ 2 y))) 2) x))))
(assert (= g0 2))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 g0 (h0 x)))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (divf (* (- x (divf (- 0 x) (+ 1 (+ 2 2)))) (+ 2 2)) (+ 1 2)) 1) 2))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
