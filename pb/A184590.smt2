;; sequence(s): A184590
;; terms: 2 3 5 6 8 10 11 13 14 16 17 19 21 22 24 25 27 29 30 32
;; small program: (((loop(x * y, 2 + x, 1) - 1) div loop(1 + ((x * y) + x), x, 1)) + 1) + x
;; fast program: ((((((((2 + ((x div (2 + 2)) + x)) div (2 + 2)) + x) + 2) div (2 * (2 + 2))) + x) div 2) + 2) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun f1 (Int Int) Int)
(declare-fun g1 (Int) Int)
(declare-fun h1 () Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (* x y))))
(assert (forall ((x Int)) (= (g0 x) (+ 2 x))))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int) (y Int)) (= (f1 x y) (+ 1 (+ (* x y) x)))))
(assert (forall ((x Int)) (= (g1 x) x)))
(assert (= h1 1))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v1 x) (u1 (g1 x) h1))))
(assert (forall ((x Int)) (= (small x) (+ (+ (divf (- (v0 x) 1) (v1 x)) 1) x))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (divf (+ (divf (+ (+ (divf (+ 2 (+ (divf x (+ 2 2)) x)) (+ 2 2)) x) 2) (* 2 (+ 2 2))) x) 2) 2) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
