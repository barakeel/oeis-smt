;; sequence(s): A135391
;; terms: 21 43 65 87 109 131 152 174 196 218 240 262 284 305 327 349 371 393 415 437
;; small program: loop(((y * y) div (2 * (2 + x))) + y, loop(x + x, 2 + 2, 1 + x), 0)
;; fast program: (((1 + (2 * (2 + (2 * (2 + 2))))) * (1 + x)) - ((1 + x) div (1 + (2 + (2 + 2))))) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun f1 (Int) Int)
(declare-fun g1 () Int)
(declare-fun h1 (Int) Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 (Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (divf (* y y) (* 2 (+ 2 x))) y))))
(assert (forall ((x Int)) (= (f1 x) (+ x x))))
(assert (= g1 (+ 2 2)))
(assert (forall ((x Int)) (= (h1 x) (+ 1 x))))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y))))))
(assert (forall ((x Int)) (= (v1 x) (u1 g1 (h1 x)))))
(assert (forall ((x Int)) (= (g0 x) (v1 x))))
(assert (= h0 0))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int)) (= (fast x) (+ (- (* (+ 1 (* 2 (+ 2 (* 2 (+ 2 2))))) (+ 1 x)) (divf (+ 1 x) (+ 1 (+ 2 (+ 2 2))))) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
