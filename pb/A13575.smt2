;; sequence(s): A13575
;; terms: 6 13 19 24 30 36 42 48 54 60 66 72 78 84 90
;; small program: (2 * ((1 + 2) * (1 + x))) + loop(x div y, x, x)
;; fast program: ((2 * ((1 + 2) * (1 + x))) - (if (x - 2) <= 0 then 1 else 2)) + (if x <= 0 then 1 else 2)
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (divf x y))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (forall ((x Int)) (= (small x) (+ (* 2 (* (+ 1 2) (+ 1 x))) (v0 x)))))
(assert (forall ((x Int)) (= (fast x) (+ (- (* 2 (* (+ 1 2) (+ 1 x))) (ite (<= (- x 2) 0) 1 2)) (ite (<= x 0) 1 2)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
