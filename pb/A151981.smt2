;; sequence(s): A151981
;; terms: 0 1 16 33 48 49 64 81 96 97 112 129 144 145 160 177 192 193 208 225
;; small program: (loop(x * x, 2, 2) * (((x div 2) + x) div 2)) + (x mod 2)
;; fast program: (((((x - ((0 - x) mod (2 + 2))) + x) + x) * 2) * 2) + (x mod 2)
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 () Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f0 x) (* x x))))
(assert (= g0 2))
(assert (= h0 2))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (= v0 (u0 g0 h0)))
(assert (forall ((x Int)) (= (small x) (+ (* v0 (divf (+ (divf x 2) x) 2)) (modf x 2)))))
(assert (forall ((x Int)) (= (fast x) (+ (* (* (+ (+ (- x (modf (- 0 x) (+ 2 2))) x) x) 2) 2) (modf x 2)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
