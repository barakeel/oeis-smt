;; sequence(s): A93718
;; terms: 1 1 1 0 1 2 1 1 1 0 1 2 1 1 1 0 1 2 1 1
;; small program: (if (x mod 2) <= 0 then 1 else x) mod (1 + 2)
;; fast program: loop2(y mod (1 + 2), 0, x mod 2, 1, x)
(set-logic UFNIA)
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun small (Int) Int)
(declare-fun f0 (Int Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 (Int) Int)
(declare-fun i0 () Int)
(declare-fun j0 (Int) Int)
(declare-fun u0 (Int Int Int) Int)
(declare-fun v0 (Int Int Int) Int)
(declare-fun w0 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (small x) (modf (ite (<= (modf x 2) 0) 1 x) (+ 1 2)))))
(assert (forall ((x Int) (y Int)) (= (f0 x y) (modf y (+ 1 2)))))
(assert (= g0 0))
(assert (forall ((x Int)) (= (h0 x) (modf x 2))))
(assert (= i0 1))
(assert (forall ((x Int)) (= (j0 x) x)))
(assert (forall ((x Int) (y Int) (z Int)) (= (u0 x y z) (ite (<= x 0) y (f0 (u0 (- x 1) y z) (v0 (- x 1) y z))))))
(assert (forall ((x Int) (y Int) (z Int)) (= (v0 x y z) (ite (<= x 0) z g0))))
(assert (forall ((x Int)) (= (w0 x) (u0 (h0 x) i0 (j0 x)))))
(assert (forall ((x Int)) (= (fast x) (w0 x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
