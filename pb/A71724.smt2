;; sequence(s): A71724
;; terms: 1 1 3 9 28 90 297 1001 3432 11934 41990 149226 534888 1931540 7020405 25662825 94287120 347993910 1289624490 4796857230
;; small program: (loop((2 * ((2 * (x * y)) - x)) div (2 + y), x, 1 + 2) * (if x <= 0 then 1 else x)) div 2
;; fast program: (((loop(2 * ((x - (x div y)) + x), x, 2 + (2 + 2)) div (1 + x)) div (2 + x)) * (if x <= 0 then 1 else x)) div 2
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun f1 (Int Int) Int)
(declare-fun g1 (Int) Int)
(declare-fun h1 () Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (divf (* 2 (- (* 2 (* x y)) x)) (+ 2 y)))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 (+ 1 2)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (divf (* (v0 x) (ite (<= x 0) 1 x)) 2))))
(assert (forall ((x Int) (y Int)) (= (f1 x y) (* 2 (+ (- x (divf x y)) x)))))
(assert (forall ((x Int)) (= (g1 x) x)))
(assert (= h1 (+ 2 (+ 2 2))))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v1 x) (u1 (g1 x) h1))))
(assert (forall ((x Int)) (= (fast x) (divf (* (divf (divf (v1 x) (+ 1 x)) (+ 2 x)) (ite (<= x 0) 1 x)) 2))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
