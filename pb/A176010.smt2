;; sequence(s): A176010
;; terms: 14 83 111 180 208 277 305 374 402 471 499 568 596 665 693 762 790 859 887 956
;; small program: ((loop(2 + (((1 + 2) * (((x mod 2) + x) + x)) + x), 2, x) - 2) - x) + (x div 2)
;; fast program: (((((((2 * (2 + (2 * ((((x mod 2) + x) + x) + x)))) + (x mod 2)) * 2) * (2 + 2)) + 1) + x) div 2) - 2
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f0 x) (+ 2 (+ (* (+ 1 2) (+ (+ (modf x 2) x) x)) x)))))
(assert (= g0 2))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 g0 (h0 x)))))
(assert (forall ((x Int)) (= (small x) (+ (- (- (v0 x) 2) x) (divf x 2)))))
(assert (forall ((x Int)) (= (fast x) (- (divf (+ (+ (* (* (+ (* 2 (+ 2 (* 2 (+ (+ (+ (modf x 2) x) x) x)))) (modf x 2)) 2) (+ 2 2)) 1) x) 2) 2))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
