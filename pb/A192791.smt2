;; sequence(s): A192791
;; terms: 40 112 240 448 760 1200 1792 2560 3528 4720 6160 7872 9880 12208 14880 17920 21352 25200 29488 34240
;; small program: loop2(((2 * (y * y)) + x) * y, x, 2, 1 + x, 2) * 2
;; fast program: (((1 + x) * (2 + x)) + (2 * (2 + 2))) * (2 * (2 + (x + x)))
(set-logic UFNIA)
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun i0 (Int) Int)
(declare-fun j0 () Int)
(declare-fun u0 (Int Int Int) Int)
(declare-fun v0 (Int Int Int) Int)
(declare-fun w0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (* (+ (* 2 (* y y)) x) y))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 2))
(assert (forall ((x Int)) (= (i0 x) (+ 1 x))))
(assert (= j0 2))
(assert (forall ((x Int) (y Int) (z Int)) (= (u0 x y z) (ite (<= x 0) y (f0 (u0 (- x 1) y z) (v0 (- x 1) y z))))))
(assert (forall ((x Int) (y Int) (z Int)) (= (v0 x y z) (ite (<= x 0) z (g0 (u0 (- x 1) y z))))))
(assert (forall ((x Int)) (= (w0 x) (u0 h0 (i0 x) j0))))
(assert (forall ((x Int)) (= (small x) (* (w0 x) 2))))
(assert (forall ((x Int)) (= (fast x) (* (+ (* (+ 1 x) (+ 2 x)) (* 2 (+ 2 2))) (* 2 (+ 2 (+ x x)))))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
