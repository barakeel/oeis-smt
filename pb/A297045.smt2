;; sequence(s): A297045
;; terms: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1
;; small program: x div loop(x + y, 2 + 2, x div 2)
;; fast program: if ((x - 2) - (2 * (2 * (2 + 2)))) <= 0 then 0 else 1
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ x y))))
(assert (= g0 (+ 2 2)))
(assert (forall ((x Int)) (= (h0 x) (divf x 2))))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 g0 (h0 x)))))
(assert (forall ((x Int)) (= (small x) (divf x (v0 x)))))
(assert (forall ((x Int)) (= (fast x) (ite (<= (- (- x 2) (* 2 (* 2 (+ 2 2)))) 0) 0 1))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
