;; sequence(s): A330035
;; terms: 0 1 ~1 ~1 1 ~1 ~1 1 ~1 ~1 1 ~1 ~1 1 1 ~1 1 1 ~1 1
;; small program: ((((loop((((x div 2) div 2) + y) div (1 + 2), x, 0) + x) mod 2) * 2) + 1) - (if x <= 0 then 1 else 2)
;; fast program: (((((((2 * ((x + x) + x)) + x) mod (1 + (2 + (2 * (2 + 2))))) + 1) + x) mod 2) * (if x <= 0 then 1 else 2)) - 1
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (divf (+ (divf (divf x 2) 2) y) (+ 1 2)))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 0))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (- (+ (* (modf (+ (v0 x) x) 2) 2) 1) (ite (<= x 0) 1 2)))))
(assert (forall ((x Int)) (= (fast x) (- (* (modf (+ (+ (modf (+ (* 2 (+ (+ x x) x)) x) (+ 1 (+ 2 (* 2 (+ 2 2))))) 1) x) 2) (ite (<= x 0) 1 2)) 1))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
