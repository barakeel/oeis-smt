;; sequence(s): A49206
;; terms: 0 1 1 2 3 3 3 4 5 5 5 6 7 7 7 8 9 9 9 10
;; small program: x - (loop(y - (x mod 2), x, 1) div 2)
;; fast program: ((if ((if x <= 0 then 1 else x) mod (2 + 2)) <= 0 then 2 else 1) + x) div 2
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (- y (modf x 2)))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (- x (divf (v0 x) 2)))))
(assert (forall ((x Int)) (= (fast x) (divf (+ (ite (<= (modf (ite (<= x 0) 1 x) (+ 2 2)) 0) 2 1) x) 2))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
