;; sequence(s): A186226
;; terms: 1 4 7 10 12 15 18 21 23 26 29 31 34 37 40 42 45 48 51 53
;; small program: loop((((2 * (((2 + y) * y) + y)) div (2 + x)) + y) + y, x, 1)
;; fast program: (((((((((((((((x div (1 + (2 + (2 + 2)))) + x) + x) div (2 + 1)) + 1) + x) div 2) + 1) + x) - 2) div (2 + 2)) + x) div 2) + x) + x) + 2
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (+ (divf (* 2 (+ (* (+ 2 y) y) y)) (+ 2 x)) y) y))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (+ (divf (+ (divf (- (+ (+ (divf (+ (+ (divf (+ (+ (divf x (+ 1 (+ 2 (+ 2 2)))) x) x) (+ 2 1)) 1) x) 2) 1) x) 2) (+ 2 2)) x) 2) x) x) 2))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
