;; sequence(s): A315470
;; terms: 1 6 11 16 21 26 32 37 42 47 52 58 64 69 74 79 84 90 95 100
;; small program: ((((loop((((if (((x * x) mod (1 + (2 + (2 + 2)))) - 1) <= 0 then x else 0) mod 2) + 1) + x, x, 2) - 1) + x) + x) + x) + x
;; fast program: (loop((((((if x <= 0 then 1 else x) - 1) div ((1 + (2 + (2 * (2 + 2)))) * 2)) + x) + x) + (x div (1 + (2 + (2 * (2 + 2))))), 1, x + x) + 1) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun f1 (Int) Int)
(declare-fun g1 () Int)
(declare-fun h1 (Int) Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f0 x) (+ (+ (modf (ite (<= (- (modf (* x x) (+ 1 (+ 2 (+ 2 2)))) 1) 0) x 0) 2) 1) x))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 2))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (+ (+ (+ (+ (- (v0 x) 1) x) x) x) x))))
(assert (forall ((x Int)) (= (f1 x) (+ (+ (+ (divf (- (ite (<= x 0) 1 x) 1) (* (+ 1 (+ 2 (* 2 (+ 2 2)))) 2)) x) x) (divf x (+ 1 (+ 2 (* 2 (+ 2 2)))))))))
(assert (= g1 1))
(assert (forall ((x Int)) (= (h1 x) (+ x x))))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y))))))
(assert (forall ((x Int)) (= (v1 x) (u1 g1 (h1 x)))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (v1 x) 1) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
