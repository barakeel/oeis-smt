;; sequence(s): A310457
;; terms: 1 4 10 15 20 25 30 35 40 45 50 56 60 64 70 75 80 85 90 95
;; small program: ((((((((((((loop((x mod 2) + y, x, 2) div 2) * 2) + 1) + x) div (1 + 2)) + x) * (1 + 2)) + 1) + x) div (1 + 2)) + x) + x) + x
;; fast program: (((((((((((loop(y, x mod (2 + 2), 2) - 1) + x) + x) div (1 + 2)) + (if x <= 0 then 1 else x)) * (1 + 2)) + 1) + x) div (1 + 2)) + x) + x) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun f1 (Int Int) Int)
(declare-fun g1 (Int) Int)
(declare-fun h1 () Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (modf x 2) y))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 2))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (+ (+ (+ (divf (+ (+ (* (+ (divf (+ (+ (* (divf (v0 x) 2) 2) 1) x) (+ 1 2)) x) (+ 1 2)) 1) x) (+ 1 2)) x) x) x))))
(assert (forall ((x Int) (y Int)) (= (f1 x y) y)))
(assert (forall ((x Int)) (= (g1 x) (modf x (+ 2 2)))))
(assert (= h1 2))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v1 x) (u1 (g1 x) h1))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (+ (divf (+ (+ (* (+ (divf (+ (+ (- (v1 x) 1) x) x) (+ 1 2)) (ite (<= x 0) 1 x)) (+ 1 2)) 1) x) (+ 1 2)) x) x) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
