;; sequence(s): A210576
;; terms: 1 2 3 4 5 7 8 9 11 13 14 17 19 23 29
;; small program: compr(((x div (1 + 2)) + ((2 - x) div 2)) + (x div (1 + (2 + 2))), x)
;; fast program: ((((2 * (x + x)) + x) div (1 + (2 * ((2 * (2 * (2 + 2))) - x)))) + 1) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun t0 (Int) Int)
(declare-fun u0 (Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f0 x) (+ (+ (divf x (+ 1 2)) (divf (- 2 x) 2)) (divf x (+ 1 (+ 2 2)))))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (forall ((x Int)) (= (t0 x) (ite (<= (f0 x) 0) x (t0 (+ x 1))))))
(assert (forall ((x Int)) (= (u0 x) (ite (<= x 0) (t0 0) (t0 (+ (u0 (- x 1)) 1))))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x)))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (divf (+ (* 2 (+ x x)) x) (+ 1 (* 2 (- (* 2 (* 2 (+ 2 2))) x)))) 1) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
