;; sequence(s): A4953-A4973
;; terms: 0 5778 11556 17334 23112 28890 34668 40446 46224 52002 57780 63558 69336 75114 80892 86670 92448 98226 104004 109782
;; small program: (loop(2 * (2 + (x * x)), 1 + 2, 1) div 2) * x
;; fast program: loop((((x * x) - 2) * x) - x, 1, 2 + (2 * (2 * (2 + 2)))) * x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 () Int)
(declare-fun small (Int) Int)
(declare-fun f1 (Int) Int)
(declare-fun g1 () Int)
(declare-fun h1 () Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 () Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f0 x) (* 2 (+ 2 (* x x))))))
(assert (= g0 (+ 1 2)))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (= v0 (u0 g0 h0)))
(assert (forall ((x Int)) (= (small x) (* (divf v0 2) x))))
(assert (forall ((x Int)) (= (f1 x) (- (* (- (* x x) 2) x) x))))
(assert (= g1 1))
(assert (= h1 (+ 2 (* 2 (* 2 (+ 2 2))))))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y))))))
(assert (= v1 (u1 g1 h1)))
(assert (forall ((x Int)) (= (fast x) (* v1 x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
