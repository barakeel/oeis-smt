;; sequence(s): A286997
;; terms: 1 2 3 4 5 6 8 9 10 11 12 13 15 16 17 18 19 20 21 22
;; small program: loop(1 + ((y * y) div ((x + y) + y)), 1 + (x div (1 + 2)), 0) + x
;; fast program: (((((loop((x div (2 + 2)) + x, 1, x div (1 + 2)) + 2) + x) + 2) + x) + x) div (1 + 2)
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun f1 (Int) Int)
(declare-fun g1 () Int)
(declare-fun h1 (Int) Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ 1 (divf (* y y) (+ (+ x y) y))))))
(assert (forall ((x Int)) (= (g0 x) (+ 1 (divf x (+ 1 2))))))
(assert (= h0 0))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (+ (v0 x) x))))
(assert (forall ((x Int)) (= (f1 x) (+ (divf x (+ 2 2)) x))))
(assert (= g1 1))
(assert (forall ((x Int)) (= (h1 x) (divf x (+ 1 2)))))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y))))))
(assert (forall ((x Int)) (= (v1 x) (u1 g1 (h1 x)))))
(assert (forall ((x Int)) (= (fast x) (divf (+ (+ (+ (+ (+ (v1 x) 2) x) 2) x) x) (+ 1 2)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
