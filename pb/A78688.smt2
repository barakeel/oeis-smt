;; sequence(s): A78688
;; terms: 1 3 1 1 11 1 1 19 1 1 27 1 1 35 1 1 43 1 1 51
;; small program: loop(((y + y) div (x * x)) + 1, (x div (1 + 2)) + x, 1)
;; fast program: ((((x * x) + x) mod (1 + 2)) * ((x div (1 + 2)) + x)) + 1
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (divf (+ y y) (* x x)) 1))))
(assert (forall ((x Int)) (= (g0 x) (+ (divf x (+ 1 2)) x))))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int)) (= (fast x) (+ (* (modf (+ (* x x) x) (+ 1 2)) (+ (divf x (+ 1 2)) x)) 1))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
