;; sequence(s): A64617
;; terms: 9 98 987 9876 98765 987654 9876543 98765432 987654321 9876543210 98765432099 987654320988 9876543209877 98765432098766 987654320987655 9876543209876544 98765432098765433 987654320987654322 9876543209876543211 98765432098765432100
;; small program: loop((2 * ((1 + (2 + 2)) * (1 + x))) - y, 1 + x, 0)
;; fast program: loop(((2 + (2 * (2 + 2))) * x) - y, x, 2 + (2 * (2 + 2))) - 1
(set-logic UFNIA)
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun f1 (Int Int) Int)
(declare-fun g1 (Int) Int)
(declare-fun h1 () Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (- (* 2 (* (+ 1 (+ 2 2)) (+ 1 x))) y))))
(assert (forall ((x Int)) (= (g0 x) (+ 1 x))))
(assert (= h0 0))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int) (y Int)) (= (f1 x y) (- (* (+ 2 (* 2 (+ 2 2))) x) y))))
(assert (forall ((x Int)) (= (g1 x) x)))
(assert (= h1 (+ 2 (* 2 (+ 2 2)))))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v1 x) (u1 (g1 x) h1))))
(assert (forall ((x Int)) (= (fast x) (- (v1 x) 1))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
