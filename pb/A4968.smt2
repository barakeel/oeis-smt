;; sequence(s): A4968
;; terms: 0 522 1043 1564 2085 2606 3127 3648 4169 4690 5211 5732 6253 6774 7295 7816 8337 8858 9379 9900
;; small program: ((loop((((x * x) + y) * x) - x, 2, 2) * x) + (if x <= 0 then 0 else 1)) + x
;; fast program: ((loop(((x * x) * x) + x, 1, 2 * (2 + 2)) * x) + (if x <= 0 then 0 else 1)) + x
(set-logic UFNIA)
(declare-fun f0 (Int Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 () Int)
(declare-fun small (Int) Int)
(declare-fun f1 (Int) Int)
(declare-fun g1 () Int)
(declare-fun h1 () Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 () Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (- (* (+ (* x x) y) x) x))))
(assert (= g0 2))
(assert (= h0 2))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (= v0 (u0 g0 h0)))
(assert (forall ((x Int)) (= (small x) (+ (+ (* v0 x) (ite (<= x 0) 0 1)) x))))
(assert (forall ((x Int)) (= (f1 x) (+ (* (* x x) x) x))))
(assert (= g1 1))
(assert (= h1 (* 2 (+ 2 2))))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y))))))
(assert (= v1 (u1 g1 h1)))
(assert (forall ((x Int)) (= (fast x) (+ (+ (* v1 x) (ite (<= x 0) 0 1)) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
