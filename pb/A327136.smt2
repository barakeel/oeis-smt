;; sequence(s): A327136
;; terms: 1 4 8 11 14 17 20 23 26 30 33 36 39 42 45 48 52 55 58 61
;; small program: (1 + (x - loop((((x div 2) div 2) div 2) - y, x, x))) + x
;; fast program: 2 + (((((x - 2) div (1 + (2 + (2 + 2)))) + x) + x) + x)
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (- (divf (divf (divf x 2) 2) 2) y))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (forall ((x Int)) (= (small x) (+ (+ 1 (- x (v0 x))) x))))
(assert (forall ((x Int)) (= (fast x) (+ 2 (+ (+ (+ (divf (- x 2) (+ 1 (+ 2 (+ 2 2)))) x) x) x)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
