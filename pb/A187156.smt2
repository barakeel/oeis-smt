;; sequence(s): A187156
;; terms: 0 0 20 64 132 224 340 480 644 832 1044 1280 1540 1824 2132 2464 2820 3200 3604 4032
;; small program: (((x - 2) + x) * loop2(x + y, 2, x, x, 1)) * 2
;; fast program: (((x - 1) + x) + (if x <= 0 then 1 else x)) * (((x - 2) + x) * 2)
(set-logic UFNIA)
(declare-fun f0 (Int Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 (Int) Int)
(declare-fun i0 (Int) Int)
(declare-fun j0 () Int)
(declare-fun u0 (Int Int Int) Int)
(declare-fun v0 (Int Int Int) Int)
(declare-fun w0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ x y))))
(assert (= g0 2))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int)) (= (i0 x) x)))
(assert (= j0 1))
(assert (forall ((x Int) (y Int) (z Int)) (= (u0 x y z) (ite (<= x 0) y (f0 (u0 (- x 1) y z) (v0 (- x 1) y z))))))
(assert (forall ((x Int) (y Int) (z Int)) (= (v0 x y z) (ite (<= x 0) z g0))))
(assert (forall ((x Int)) (= (w0 x) (u0 (h0 x) (i0 x) j0))))
(assert (forall ((x Int)) (= (small x) (* (* (+ (- x 2) x) (w0 x)) 2))))
(assert (forall ((x Int)) (= (fast x) (* (+ (+ (- x 1) x) (ite (<= x 0) 1 x)) (* (+ (- x 2) x) 2)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
