;; sequence(s): A173903
;; terms: 2 3 12 15 18 21 27
;; small program: ((1 + loop(y, (x - 2) - 2, 1)) + x) * (if (x - 1) <= 0 then 1 else (1 + 2))
;; fast program: (loop(1 + y, (x - 2) - 2, 2) + x) * (if (x - 1) <= 0 then 1 else (1 + 2))
(set-logic UFNIA)
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun f1 (Int Int) Int)
(declare-fun g1 (Int) Int)
(declare-fun h1 () Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) y)))
(assert (forall ((x Int)) (= (g0 x) (- (- x 2) 2))))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (* (+ (+ 1 (v0 x)) x) (ite (<= (- x 1) 0) 1 (+ 1 2))))))
(assert (forall ((x Int) (y Int)) (= (f1 x y) (+ 1 y))))
(assert (forall ((x Int)) (= (g1 x) (- (- x 2) 2))))
(assert (= h1 2))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v1 x) (u1 (g1 x) h1))))
(assert (forall ((x Int)) (= (fast x) (* (+ (v1 x) x) (ite (<= (- x 1) 0) 1 (+ 1 2))))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
