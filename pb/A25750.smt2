;; sequence(s): A25750
;; terms: 1 1 10 150 2625 49875 997500 20662500 439078125 9513359375 209293906250 4661546093750 104884787109375 2380077861328125 54401779687500000 1251240932812500000 28934946571289062500
;; small program: loop((((2 * ((2 * (x * y)) - x)) div (1 + y)) + x) * (1 + (2 + 2)), x - 1, 1)
;; fast program: loop(((((((x + x) * y) - x) * 2) div (1 + y)) + x) * (1 + (2 + 2)), x - 1, 1)
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun f1 (Int Int) Int)
(declare-fun g1 (Int) Int)
(declare-fun h1 () Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (* (+ (divf (* 2 (- (* 2 (* x y)) x)) (+ 1 y)) x) (+ 1 (+ 2 2))))))
(assert (forall ((x Int)) (= (g0 x) (- x 1))))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int) (y Int)) (= (f1 x y) (* (+ (divf (* (- (* (+ x x) y) x) 2) (+ 1 y)) x) (+ 1 (+ 2 2))))))
(assert (forall ((x Int)) (= (g1 x) (- x 1))))
(assert (= h1 1))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v1 x) (u1 (g1 x) h1))))
(assert (forall ((x Int)) (= (fast x) (v1 x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
