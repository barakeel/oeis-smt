;; sequence(s): A337080
;; terms: 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80
;; small program: (loop((if (((1 + x) div (2 * (2 + 2))) - 2) <= 0 then 1 else 0) + x, 2, x) + x) * 2
;; fast program: (loop((if (2 + (x - (2 * (2 * (2 + (2 + 2)))))) <= 0 then 1 else 0) + x, 2, x) + x) * 2
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun f1 (Int) Int)
(declare-fun g1 () Int)
(declare-fun h1 (Int) Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f0 x) (+ (ite (<= (- (divf (+ 1 x) (* 2 (+ 2 2))) 2) 0) 1 0) x))))
(assert (= g0 2))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 g0 (h0 x)))))
(assert (forall ((x Int)) (= (small x) (* (+ (v0 x) x) 2))))
(assert (forall ((x Int)) (= (f1 x) (+ (ite (<= (+ 2 (- x (* 2 (* 2 (+ 2 (+ 2 2)))))) 0) 1 0) x))))
(assert (= g1 2))
(assert (forall ((x Int)) (= (h1 x) x)))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y))))))
(assert (forall ((x Int)) (= (v1 x) (u1 g1 (h1 x)))))
(assert (forall ((x Int)) (= (fast x) (* (+ (v1 x) x) 2))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
