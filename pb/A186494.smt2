;; sequence(s): A186494
;; terms: 1 3 5 8 12 16 21 26 32 39 46 54 62 71 81 91 102 113 125 138
;; small program: (loop(((1 + 2) * (x div y)) + x, x, 2) div (1 + x)) - 1
;; fast program: ((1 + 2) * (((2 + x) * (2 + x)) + x)) div (2 + (2 * (2 + 2)))
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (* (+ 1 2) (divf x y)) x))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 2))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (- (divf (v0 x) (+ 1 x)) 1))))
(assert (forall ((x Int)) (= (fast x) (divf (* (+ 1 2) (+ (* (+ 2 x) (+ 2 x)) x)) (+ 2 (* 2 (+ 2 2)))))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
