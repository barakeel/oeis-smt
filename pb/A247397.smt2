;; sequence(s): A247397
;; terms: 1 2 3 4 5 6 7 8 9 10 12 13
;; small program: (if (((x div 2) - 2) - 2) <= 0 then 1 else 2) + x
;; fast program: x + loop2(y, 2, x - (2 * (2 + 2)), 1, 1)
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun small (Int) Int)
(declare-fun f0 (Int Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 (Int) Int)
(declare-fun i0 () Int)
(declare-fun j0 () Int)
(declare-fun u0 (Int Int Int) Int)
(declare-fun v0 (Int Int Int) Int)
(declare-fun w0 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (small x) (+ (ite (<= (- (- (divf x 2) 2) 2) 0) 1 2) x))))
(assert (forall ((x Int) (y Int)) (= (f0 x y) y)))
(assert (= g0 2))
(assert (forall ((x Int)) (= (h0 x) (- x (* 2 (+ 2 2))))))
(assert (= i0 1))
(assert (= j0 1))
(assert (forall ((x Int) (y Int) (z Int)) (= (u0 x y z) (ite (<= x 0) y (f0 (u0 (- x 1) y z) (v0 (- x 1) y z))))))
(assert (forall ((x Int) (y Int) (z Int)) (= (v0 x y z) (ite (<= x 0) z g0))))
(assert (forall ((x Int)) (= (w0 x) (u0 (h0 x) i0 j0))))
(assert (forall ((x Int)) (= (fast x) (+ x (w0 x)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
