;; sequence(s): A291578
;; terms: 1 1 1 1 1 1 ~5 1 1 1 1 1 1 ~5 1 1 1 1 1 1
;; small program: 1 - loop((0 - (2 * (2 + 2))) mod (1 + x), x, x)
;; fast program: 1 - (if ((1 + x) mod (1 + (2 + (2 + 2)))) <= 0 then (2 + (2 + 2)) else 0)
(set-logic UFNIA)
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f0 x) (modf (- 0 (* 2 (+ 2 2))) (+ 1 x)))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (forall ((x Int)) (= (small x) (- 1 (v0 x)))))
(assert (forall ((x Int)) (= (fast x) (- 1 (ite (<= (modf (+ 1 x) (+ 1 (+ 2 (+ 2 2)))) 0) (+ 2 (+ 2 2)) 0)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
