;; sequence(s): A64437
;; terms: 1 3 6 8 10 13 15 18 20 23 25 27 30 32 35 37 39 42 44 47
;; small program: loop(y - ((0 - ((x + y) * y)) div x), x, 1)
;; fast program: ((((((((((1 + ((2 + x) div (2 + 2))) + x) div (2 + 2)) + x) div 2) + 1) + x) div (2 + 2)) + 1) + x) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (- y (divf (- 0 (* (+ x y) y)) x)))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (+ (divf (+ (+ (divf (+ (divf (+ (+ 1 (divf (+ 2 x) (+ 2 2))) x) (+ 2 2)) x) 2) 1) x) (+ 2 2)) 1) x) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
