;; sequence(s): A183041
;; terms: 3 2 1 2 3 4 3 4 5 6 5 6 7 8 7 8 9 10 9 10
;; small program: (loop(y - (x mod 2), x, 2) - (x div 2)) + 1
;; fast program: ((((1 - x) div (2 + 2)) * 2) + 1) + (if x <= 0 then 2 else x)
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (- y (modf x 2)))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 2))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (+ (- (v0 x) (divf x 2)) 1))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (* (divf (- 1 x) (+ 2 2)) 2) 1) (ite (<= x 0) 2 x)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
