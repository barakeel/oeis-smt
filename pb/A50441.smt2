;; sequence(s): A50441
;; terms: 0 1 14 50 120 235 406 644 960 1365 1870 2486 3224 4095 5110 6280 7616 9129 10830 12730
;; small program: loop((y * y) + x, x, (1 + 2) * ((((x * x) * x) - x) div 2))
;; fast program: (((2 - x) * ((x * x) - x)) div (2 + (2 + 2))) + ((2 * ((x * x) * x)) - x)
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (* y y) x))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (forall ((x Int)) (= (h0 x) (* (+ 1 2) (divf (- (* (* x x) x) x) 2)))))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int)) (= (fast x) (+ (divf (* (- 2 x) (- (* x x) x)) (+ 2 (+ 2 2))) (- (* 2 (* (* x x) x)) x)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
