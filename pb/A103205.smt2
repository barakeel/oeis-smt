;; sequence(s): A103205
;; terms: 0 1 2 3 4 5 6 7 8 19 10 11 12 13 14 15 16 17 18 29
;; small program: if ((1 + x) mod (2 + (2 * (2 + 2)))) <= 0 then loop(x + y, 2 + 2, x) else x
;; fast program: loop(((if ((1 + x) mod (1 + (2 + 2))) <= 0 then (1 + (2 + 2)) else 0) * 2) + x, x mod 2, x)
(set-logic UFNIA)
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun f1 (Int) Int)
(declare-fun g1 (Int) Int)
(declare-fun h1 (Int) Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ x y))))
(assert (= g0 (+ 2 2)))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 g0 (h0 x)))))
(assert (forall ((x Int)) (= (small x) (ite (<= (modf (+ 1 x) (+ 2 (* 2 (+ 2 2)))) 0) (v0 x) x))))
(assert (forall ((x Int)) (= (f1 x) (+ (* (ite (<= (modf (+ 1 x) (+ 1 (+ 2 2))) 0) (+ 1 (+ 2 2)) 0) 2) x))))
(assert (forall ((x Int)) (= (g1 x) (modf x 2))))
(assert (forall ((x Int)) (= (h1 x) x)))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y))))))
(assert (forall ((x Int)) (= (v1 x) (u1 (g1 x) (h1 x)))))
(assert (forall ((x Int)) (= (fast x) (v1 x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
