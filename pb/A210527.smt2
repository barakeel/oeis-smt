;; sequence(s): A210527
;; terms: 83 131 197 281 383 503 641 797 971 1163 1373 1601 1847 2111 2393 2693 3011 3347 3701 4073
;; small program: ((loop2(2 + ((y * y) + x), 2 + y, 1 + 2, 1, x) + x) * (1 + 2)) + 2
;; fast program: (((((1 + (2 + 2)) + ((2 + x) * (x + 2))) * (1 + 2)) + x) * (1 + 2)) + 2
(set-logic UFNIA)
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int Int) Int)
(declare-fun h0 () Int)
(declare-fun i0 () Int)
(declare-fun j0 (Int) Int)
(declare-fun u0 (Int Int Int) Int)
(declare-fun v0 (Int Int Int) Int)
(declare-fun w0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ 2 (+ (* y y) x)))))
(assert (forall ((x Int) (y Int)) (= (g0 x y) (+ 2 y))))
(assert (= h0 (+ 1 2)))
(assert (= i0 1))
(assert (forall ((x Int)) (= (j0 x) x)))
(assert (forall ((x Int) (y Int) (z Int)) (= (u0 x y z) (ite (<= x 0) y (f0 (u0 (- x 1) y z) (v0 (- x 1) y z))))))
(assert (forall ((x Int) (y Int) (z Int)) (= (v0 x y z) (ite (<= x 0) z (g0 (u0 (- x 1) y z) (v0 (- x 1) y z))))))
(assert (forall ((x Int)) (= (w0 x) (u0 h0 i0 (j0 x)))))
(assert (forall ((x Int)) (= (small x) (+ (* (+ (w0 x) x) (+ 1 2)) 2))))
(assert (forall ((x Int)) (= (fast x) (+ (* (+ (* (+ (+ 1 (+ 2 2)) (* (+ 2 x) (+ x 2))) (+ 1 2)) x) (+ 1 2)) 2))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
