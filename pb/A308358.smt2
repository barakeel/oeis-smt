;; sequence(s): A308358
;; terms: 0 0 0 1 1 2 2 3 3 3 4 4 5 5 6 6 6 7 7 8
;; small program: (loop((((y + y) * y) div ((x + 2) + y)) + y, x, 0) div 2) div 2
;; fast program: (((((if x <= 0 then 1 else x) - 1) div (2 + (2 + 2))) + x) + x) div (1 + (2 + 2))
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (divf (* (+ y y) y) (+ (+ x 2) y)) y))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 0))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (divf (divf (v0 x) 2) 2))))
(assert (forall ((x Int)) (= (fast x) (divf (+ (+ (divf (- (ite (<= x 0) 1 x) 1) (+ 2 (+ 2 2))) x) x) (+ 1 (+ 2 2))))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
