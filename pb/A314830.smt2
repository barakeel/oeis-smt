;; sequence(s): A314830
;; terms: 1 5 9 14 18 22 27 32 36 40 45 49 54 59 63 68 72 76 81 86
;; small program: ((((((((((loop2(loop2(x + y, x, y, x, 0), y div 2, 1 + 2, 1, x) mod 2) + x) + x) + x) + x) + x) + x) + x) + x) + x) div (if x <= 0 then 1 else 2)
;; fast program: ((((((((((((((((((((((((((((1 + (x + x)) div (1 + 2)) * (2 + (2 + 2))) + 1) + x) div (if x <= 0 then 1 else 2)) + x) + x) + x) + x) + x) + x) div (if x <= 0 then 1 else 2)) + x) + x) * 2) + 1) + x) div (1 + 2)) + x) + x) + x) + x) - (if x <= 0 then 1 else 2)) + x) + x) div (1 + 2)) + 1) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f1 (Int Int) Int)
(declare-fun g1 (Int) Int)
(declare-fun h1 (Int Int) Int)
(declare-fun i1 (Int) Int)
(declare-fun j1 () Int)
(declare-fun u1 (Int Int Int) Int)
(declare-fun v1 (Int Int Int) Int)
(declare-fun w1 (Int Int) Int)
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int Int) Int)
(declare-fun h0 () Int)
(declare-fun i0 () Int)
(declare-fun j0 (Int) Int)
(declare-fun u0 (Int Int Int) Int)
(declare-fun v0 (Int Int Int) Int)
(declare-fun w0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f1 x y) (+ x y))))
(assert (forall ((x Int)) (= (g1 x) x)))
(assert (forall ((x Int) (y Int)) (= (h1 x y) y)))
(assert (forall ((x Int)) (= (i1 x) x)))
(assert (= j1 0))
(assert (forall ((x Int) (y Int) (z Int)) (= (u1 x y z) (ite (<= x 0) y (f1 (u1 (- x 1) y z) (v1 (- x 1) y z))))))
(assert (forall ((x Int) (y Int) (z Int)) (= (v1 x y z) (ite (<= x 0) z (g1 (u1 (- x 1) y z))))))
(assert (forall ((x Int) (y Int)) (= (w1 x y) (u1 (h1 x y) (i1 x) j1))))
(assert (forall ((x Int) (y Int)) (= (f0 x y) (w1 x y))))
(assert (forall ((x Int) (y Int)) (= (g0 x y) (divf y 2))))
(assert (= h0 (+ 1 2)))
(assert (= i0 1))
(assert (forall ((x Int)) (= (j0 x) x)))
(assert (forall ((x Int) (y Int) (z Int)) (= (u0 x y z) (ite (<= x 0) y (f0 (u0 (- x 1) y z) (v0 (- x 1) y z))))))
(assert (forall ((x Int) (y Int) (z Int)) (= (v0 x y z) (ite (<= x 0) z (g0 (u0 (- x 1) y z) (v0 (- x 1) y z))))))
(assert (forall ((x Int)) (= (w0 x) (u0 h0 i0 (j0 x)))))
(assert (forall ((x Int)) (= (small x) (divf (+ (+ (+ (+ (+ (+ (+ (+ (+ (modf (w0 x) 2) x) x) x) x) x) x) x) x) x) (ite (<= x 0) 1 2)))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (divf (+ (+ (- (+ (+ (+ (+ (divf (+ (+ (* (+ (+ (divf (+ (+ (+ (+ (+ (+ (divf (+ (+ (* (divf (+ 1 (+ x x)) (+ 1 2)) (+ 2 (+ 2 2))) 1) x) (ite (<= x 0) 1 2)) x) x) x) x) x) x) (ite (<= x 0) 1 2)) x) x) 2) 1) x) (+ 1 2)) x) x) x) x) (ite (<= x 0) 1 2)) x) x) (+ 1 2)) 1) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
