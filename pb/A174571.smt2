;; sequence(s): A174571
;; terms: 0 4 1 4 1 4 1 4 2 4 1 4 3 4 1 4 4 4 1 4
;; small program: (if (x mod (2 + 2)) <= 0 then (x div (2 + 2)) else 1) + ((1 + 2) * (x mod 2))
;; fast program: (if (x mod (2 + 2)) <= 0 then (x div (2 + 2)) else 1) + loop(1 + 2, x mod 2, 0)
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun small (Int) Int)
(declare-fun f0 () Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (small x) (+ (ite (<= (modf x (+ 2 2)) 0) (divf x (+ 2 2)) 1) (* (+ 1 2) (modf x 2))))))
(assert (= f0 (+ 1 2)))
(assert (forall ((x Int)) (= (g0 x) (modf x 2))))
(assert (= h0 0))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y f0))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (fast x) (+ (ite (<= (modf x (+ 2 2)) 0) (divf x (+ 2 2)) 1) (v0 x)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
