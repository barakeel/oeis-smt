;; sequence(s): A61726
;; terms: 4 12 30 50 60 84 140 180 180 220 330 390 364 420 600 680 612 684 950 1050
;; small program: (2 + (2 + ((x div 2) mod 2))) * loop(x + y, 1 + x, 0)
;; fast program: (((1 + x) * (2 + x)) div 2) * ((2 + 2) + ((x div 2) mod 2))
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ x y))))
(assert (forall ((x Int)) (= (g0 x) (+ 1 x))))
(assert (= h0 0))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (* (+ 2 (+ 2 (modf (divf x 2) 2))) (v0 x)))))
(assert (forall ((x Int)) (= (fast x) (* (divf (* (+ 1 x) (+ 2 x)) 2) (+ (+ 2 2) (modf (divf x 2) 2))))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
