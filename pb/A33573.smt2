;; sequence(s): A33573
;; terms: 1 30 95 196 333 506 715 960 1241 1558 1911 2300 2725 3186 3683 4216 4785 5390 6031 6708
;; small program: (loop2((2 + x) * (x * y), 2, 2, 1, x) - x) + 1
;; fast program: (1 + ((2 * (2 * (x + x))) + x)) * (1 + (x + x))
(set-logic UFNIA)
(declare-fun f0 (Int Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 () Int)
(declare-fun i0 () Int)
(declare-fun j0 (Int) Int)
(declare-fun u0 (Int Int Int) Int)
(declare-fun v0 (Int Int Int) Int)
(declare-fun w0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (* (+ 2 x) (* x y)))))
(assert (= g0 2))
(assert (= h0 2))
(assert (= i0 1))
(assert (forall ((x Int)) (= (j0 x) x)))
(assert (forall ((x Int) (y Int) (z Int)) (= (u0 x y z) (ite (<= x 0) y (f0 (u0 (- x 1) y z) (v0 (- x 1) y z))))))
(assert (forall ((x Int) (y Int) (z Int)) (= (v0 x y z) (ite (<= x 0) z g0))))
(assert (forall ((x Int)) (= (w0 x) (u0 h0 i0 (j0 x)))))
(assert (forall ((x Int)) (= (small x) (+ (- (w0 x) x) 1))))
(assert (forall ((x Int)) (= (fast x) (* (+ 1 (+ (* 2 (* 2 (+ x x))) x)) (+ 1 (+ x x))))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
