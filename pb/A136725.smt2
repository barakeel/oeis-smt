;; sequence(s): A136725
;; terms: 1 2 12 20 28 36 44 52 60 68 76 84 92 100
;; small program: loop(((2 mod x) + 2) * y, (x - 1) + x, 1)
;; fast program: (if x <= 0 then 1 else (2 * ((x - 1) + x))) * (if (x - 1) <= 0 then 1 else 2)
(set-logic UFNIA)
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (* (+ (modf 2 x) 2) y))))
(assert (forall ((x Int)) (= (g0 x) (+ (- x 1) x))))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int)) (= (fast x) (* (ite (<= x 0) 1 (* 2 (+ (- x 1) x))) (ite (<= (- x 1) 0) 1 2)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
