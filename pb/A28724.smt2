;; sequence(s): A28724
;; terms: 0 0 0 0 1 2 6 9 18 24 40 50 75 90 126 147 196 224 288 324
;; small program: loop((x - 1) + y, x div 2, 0) * ((x - 1) div 2)
;; fast program: ((1 + (((x * x) div (2 + 2)) - x)) * (x div 2)) div 2
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (- x 1) y))))
(assert (forall ((x Int)) (= (g0 x) (divf x 2))))
(assert (= h0 0))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (* (v0 x) (divf (- x 1) 2)))))
(assert (forall ((x Int)) (= (fast x) (divf (* (+ 1 (- (divf (* x x) (+ 2 2)) x)) (divf x 2)) 2))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
