;; sequence(s): A191276
;; terms: 0 1 4 5 7 8 11 12 13 16 17 19 20 23 24 25 28 29 31 32
;; small program: loop((y - (x mod 2)) - ((x div 2) div (1 + 2)), x + x, 0)
;; fast program: ((((((1 + (2 + (x + x))) div (1 + (2 + (2 + 2)))) + x) * 2) * 2) + 1) div (1 + 2)
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (- (- y (modf x 2)) (divf (divf x 2) (+ 1 2))))))
(assert (forall ((x Int)) (= (g0 x) (+ x x))))
(assert (= h0 0))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int)) (= (fast x) (divf (+ (* (* (+ (divf (+ 1 (+ 2 (+ x x))) (+ 1 (+ 2 (+ 2 2)))) x) 2) 2) 1) (+ 1 2)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
