;; sequence(s): A210978
;; terms: 0 1 5 9 17 24 36 46 62 75 95 111 135 154 182 204 236 261 297 325
;; small program: (x * x) + loop(x - y, x - (x div 2), x)
;; fast program: ((((((x - 1) div 2) + x) * (x div 2)) + (x * x)) div 2) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (- x y))))
(assert (forall ((x Int)) (= (g0 x) (- x (divf x 2)))))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (forall ((x Int)) (= (small x) (+ (* x x) (v0 x)))))
(assert (forall ((x Int)) (= (fast x) (+ (divf (+ (* (+ (divf (- x 1) 2) x) (divf x 2)) (* x x)) 2) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
