;; sequence(s): A100179
;; terms: 1 9 34 86 175 311 504 764 1101 1525 2046 2674 3419 4291 5300 6456 7769 9249 10906 12750
;; small program: 1 + loop(((2 + ((2 * (y + y)) + y)) * y) + x, x, x)
;; fast program: ((((1 + (2 * ((1 + (2 + 2)) * (1 + x)))) * ((x * x) + x)) div (2 + (2 + 2))) + 1) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (* (+ 2 (+ (* 2 (+ y y)) y)) y) x))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (forall ((x Int)) (= (small x) (+ 1 (v0 x)))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (divf (* (+ 1 (* 2 (* (+ 1 (+ 2 2)) (+ 1 x)))) (+ (* x x) x)) (+ 2 (+ 2 2))) 1) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
