;; sequence(s): A332057
;; terms: 1 3 2 3 7 4 5 11 6 7 15 8 9 19 10 11 23 12 13 27
;; small program: (2 + ((x div (1 + 2)) + x)) div loop(y, x mod (1 + 2), 2)
;; fast program: (1 + ((((2 + x) * (x * x)) div (1 + 2)) + x)) mod (2 + (x + x))
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) y)))
(assert (forall ((x Int)) (= (g0 x) (modf x (+ 1 2)))))
(assert (= h0 2))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (divf (+ 2 (+ (divf x (+ 1 2)) x)) (v0 x)))))
(assert (forall ((x Int)) (= (fast x) (modf (+ 1 (+ (divf (* (+ 2 x) (* x x)) (+ 1 2)) x)) (+ 2 (+ x x))))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
