;; sequence(s): A212247
;; terms: 0 1 4 13 29 56 95 150 222 315 430 571 739 938 1169 1436 1740 2085 2472 2905
;; small program: (loop(loop((((2 * ((x - 2) + x)) + x) * x) div 2, 1, y) + x, x, 1) + x) div 2
;; fast program: ((((((((x * x) * x) - x) div (2 + (2 + 2))) * (1 + (2 + 2))) + 1) + ((x * x) div (2 + 2))) + x) div 2
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f1 (Int) Int)
(declare-fun g1 () Int)
(declare-fun h1 (Int Int) Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 (Int Int) Int)
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f1 x) (divf (* (+ (* 2 (+ (- x 2) x)) x) x) 2))))
(assert (= g1 1))
(assert (forall ((x Int) (y Int)) (= (h1 x y) y)))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y))))))
(assert (forall ((x Int) (y Int)) (= (v1 x y) (u1 g1 (h1 x y)))))
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (v1 x y) x))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (divf (+ (v0 x) x) 2))))
(assert (forall ((x Int)) (= (fast x) (divf (+ (+ (+ (* (divf (- (* (* x x) x) x) (+ 2 (+ 2 2))) (+ 1 (+ 2 2))) 1) (divf (* x x) (+ 2 2))) x) 2))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
