;; sequence(s): A6446
;; terms: 1 2 3 4 6 8 9 12 15 16 20 24 25 30 35 36 42 48 49 56
;; small program: 1 + (loop(x + y, x - (x div (1 + 2)), x) div 2)
;; fast program: ((((1 + x) div (1 + 2)) * ((x - 1) div (1 + 2))) + 1) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ x y))))
(assert (forall ((x Int)) (= (g0 x) (- x (divf x (+ 1 2))))))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (forall ((x Int)) (= (small x) (+ 1 (divf (v0 x) 2)))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (* (divf (+ 1 x) (+ 1 2)) (divf (- x 1) (+ 1 2))) 1) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
