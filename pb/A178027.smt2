;; sequence(s): A178027
;; terms: 0 5291 10582 15873 21164 26455 31746 37037 42328 47619 52910 58201 63492 68783 74074 79365 84656 89947 95238 100529
;; small program: loop(((((2 + (x * x)) * 2) * 2) - x) * x, 2, 1) * x
;; fast program: (loop(((x - 1) + x) * (x * x), 1, 2 + (2 * (2 + (2 + 2)))) * x) - x
(set-logic UFNIA)
(declare-fun f0 (Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 () Int)
(declare-fun small (Int) Int)
(declare-fun f1 (Int) Int)
(declare-fun g1 () Int)
(declare-fun h1 () Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 () Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f0 x) (* (- (* (* (+ 2 (* x x)) 2) 2) x) x))))
(assert (= g0 2))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (= v0 (u0 g0 h0)))
(assert (forall ((x Int)) (= (small x) (* v0 x))))
(assert (forall ((x Int)) (= (f1 x) (* (+ (- x 1) x) (* x x)))))
(assert (= g1 1))
(assert (= h1 (+ 2 (* 2 (+ 2 (+ 2 2))))))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y))))))
(assert (= v1 (u1 g1 h1)))
(assert (forall ((x Int)) (= (fast x) (- (* v1 x) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
