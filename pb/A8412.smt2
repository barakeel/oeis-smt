;; sequence(s): A8412
;; terms: 1 8 32 88 192 360 608 952 1408 1992 2720 3608 4672 5928 7392 9080 11008 13192 15648 18392
;; small program: loop((((((y * y) + y) * y) div (2 + y)) + 2) + x, x + x, 1)
;; fast program: (1 + (2 * (2 * (2 * ((2 + (x * x)) * x))))) div (if x <= 0 then 1 else (1 + 2))
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (+ (divf (* (+ (* y y) y) y) (+ 2 y)) 2) x))))
(assert (forall ((x Int)) (= (g0 x) (+ x x))))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int)) (= (fast x) (divf (+ 1 (* 2 (* 2 (* 2 (* (+ 2 (* x x)) x))))) (ite (<= x 0) 1 (+ 1 2))))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
