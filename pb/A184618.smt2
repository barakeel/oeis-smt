;; sequence(s): A184618
;; terms: 1 3 4 5 7 8 10 11 13 14 15 17 18 20 21 22 24 25 27 28
;; small program: loop((((((x * x) + (x div 2)) div (y * y)) mod 2) + x) + 1, x, 1)
;; fast program: ((((((2 * (2 * (2 + (x + x)))) div (1 + (2 * (2 * (2 * (2 + 2)))))) + 2) + x) div (1 + 2)) + 1) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (+ (modf (divf (+ (* x x) (divf x 2)) (* y y)) 2) x) 1))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (divf (+ (+ (divf (* 2 (* 2 (+ 2 (+ x x)))) (+ 1 (* 2 (* 2 (* 2 (+ 2 2)))))) 2) x) (+ 1 2)) 1) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
