;; sequence(s): A312901
;; terms: 1 4 9 13 17 22 26 30 35 39 43 48 52 56 61 65 69 74 78 82
;; small program: (2 * (x + x)) + loop((y - x) div 2, x, 1)
;; fast program: (2 * (x + x)) + ((1 + (if x <= 0 then 2 else x)) div (1 + 2))
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (divf (- y x) 2))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (+ (* 2 (+ x x)) (v0 x)))))
(assert (forall ((x Int)) (= (fast x) (+ (* 2 (+ x x)) (divf (+ 1 (ite (<= x 0) 2 x)) (+ 1 2))))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
