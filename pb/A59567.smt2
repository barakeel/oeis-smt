;; sequence(s): A59567
;; terms: 1 2 4 5 6 8 9 10 12 13 15 16 17 19 20 21 23 24 25 27
;; small program: ((loop((((x * y) div (x + y)) + y) + y, x, 0) + 1) div 2) + 1
;; fast program: 1 + (((1 + ((x div (2 + (2 * (2 + 2)))) + x)) div (1 + 2)) + x)
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (+ (divf (* x y) (+ x y)) y) y))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 0))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (+ (divf (+ (v0 x) 1) 2) 1))))
(assert (forall ((x Int)) (= (fast x) (+ 1 (+ (divf (+ 1 (+ (divf x (+ 2 (* 2 (+ 2 2)))) x)) (+ 1 2)) x)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
