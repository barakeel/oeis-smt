;; sequence(s): A165669
;; terms: 2 4 8 5 5 8 4 2 4 8 5 5 8 4 2 4 8 5 5 8
;; small program: loop(1 + ((y mod 2) + x), (x * x) mod (1 + (2 + (2 + 2))), 2)
;; fast program: ((1 + ((1 + 2) * ((x * x) mod (1 + (2 + (2 + 2)))))) div 2) + 2
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ 1 (+ (modf y 2) x)))))
(assert (forall ((x Int)) (= (g0 x) (modf (* x x) (+ 1 (+ 2 (+ 2 2)))))))
(assert (= h0 2))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int)) (= (fast x) (+ (divf (+ 1 (* (+ 1 2) (modf (* x x) (+ 1 (+ 2 (+ 2 2)))))) 2) 2))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
