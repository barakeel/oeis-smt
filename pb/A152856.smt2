;; sequence(s): A152856
;; terms: 4 0 4 3 4 4 0 4 3 4 4 0 4 3 4 4 0 4 3 4
;; small program: (2 + loop((y * y) + x, x, 2)) mod (1 + (2 + 2))
;; fast program: ((1 + (2 * (x * x))) * (x - 1)) mod (1 + (2 + 2))
(set-logic UFNIA)
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (* y y) x))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 2))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (modf (+ 2 (v0 x)) (+ 1 (+ 2 2))))))
(assert (forall ((x Int)) (= (fast x) (modf (* (+ 1 (* 2 (* x x))) (- x 1)) (+ 1 (+ 2 2))))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
