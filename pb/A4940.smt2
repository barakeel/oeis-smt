;; sequence(s): A4940
;; terms: 0 11 22 33 44 55 67 78 89 100 111 122 133 144 155 166 177 189 200 211
;; small program: (((loop((x + x) + x, 1 + (2 + 2), x) + x) div loop(1 + (x + x), 2, 2)) + 1) div 2
;; fast program: ((((1 + (2 * (2 * ((2 * (x + x)) + x)))) * (1 + (2 + 2))) div (1 + (2 + (2 * (2 + 2))))) + x) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun f1 (Int) Int)
(declare-fun g1 () Int)
(declare-fun h1 () Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 () Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f0 x) (+ (+ x x) x))))
(assert (= g0 (+ 1 (+ 2 2))))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 g0 (h0 x)))))
(assert (forall ((x Int)) (= (f1 x) (+ 1 (+ x x)))))
(assert (= g1 2))
(assert (= h1 2))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y))))))
(assert (= v1 (u1 g1 h1)))
(assert (forall ((x Int)) (= (small x) (divf (+ (divf (+ (v0 x) x) v1) 1) 2))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (divf (* (+ 1 (* 2 (* 2 (+ (* 2 (+ x x)) x)))) (+ 1 (+ 2 2))) (+ 1 (+ 2 (* 2 (+ 2 2))))) x) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
