;; sequence(s): A106840
;; terms: 1 4 8 9 16 17 20 25 32 33 36 40 41 49 52 57 64 65 68 72
;; small program: (compr(((((loop((((loop(loop(loop(1 + loop(loop(x div 2, x mod 2, x), loop(2 + (2 + 2), x mod 2, 1), x), 1, x div 2), x mod 2, x) div 2, x mod 2, x div 2) + 1) mod 2) + 1) + x, 2, x) - x) div 2) mod 2) * 2) mod (1 + x), 1 + x) div 2) + 1
;; fast program: (((compr((((loop((((loop(loop(loop(1 + loop(loop(x div 2, x mod 2, x), loop(2 + (2 + 2), x mod 2, 1), x), 1, x div 2), x mod 2, x) div 2, x mod 2, x div 2) + 1) mod 2) + 1) + x, 2, x) - x) mod (1 + 2)) - 1) mod (1 + x), 1 + x) + 1) div 2) + x) - x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f6 (Int) Int)
(declare-fun g6 (Int) Int)
(declare-fun h6 (Int) Int)
(declare-fun u6 (Int Int) Int)
(declare-fun v6 (Int) Int)
(declare-fun f5 (Int) Int)
(declare-fun f7 () Int)
(declare-fun g7 (Int) Int)
(declare-fun h7 () Int)
(declare-fun u7 (Int Int) Int)
(declare-fun v7 (Int) Int)
(declare-fun g5 (Int) Int)
(declare-fun h5 (Int) Int)
(declare-fun u5 (Int Int) Int)
(declare-fun v5 (Int) Int)
(declare-fun f4 (Int) Int)
(declare-fun g4 () Int)
(declare-fun h4 (Int) Int)
(declare-fun u4 (Int Int) Int)
(declare-fun v4 (Int) Int)
(declare-fun f3 (Int) Int)
(declare-fun g3 (Int) Int)
(declare-fun h3 (Int) Int)
(declare-fun u3 (Int Int) Int)
(declare-fun v3 (Int) Int)
(declare-fun f2 (Int) Int)
(declare-fun g2 (Int) Int)
(declare-fun h2 (Int) Int)
(declare-fun u2 (Int Int) Int)
(declare-fun v2 (Int) Int)
(declare-fun f1 (Int) Int)
(declare-fun g1 () Int)
(declare-fun h1 (Int) Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 (Int) Int)
(declare-fun f0 (Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun t0 (Int) Int)
(declare-fun u0 (Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun f14 (Int) Int)
(declare-fun g14 (Int) Int)
(declare-fun h14 (Int) Int)
(declare-fun u14 (Int Int) Int)
(declare-fun v14 (Int) Int)
(declare-fun f13 (Int) Int)
(declare-fun f15 () Int)
(declare-fun g15 (Int) Int)
(declare-fun h15 () Int)
(declare-fun u15 (Int Int) Int)
(declare-fun v15 (Int) Int)
(declare-fun g13 (Int) Int)
(declare-fun h13 (Int) Int)
(declare-fun u13 (Int Int) Int)
(declare-fun v13 (Int) Int)
(declare-fun f12 (Int) Int)
(declare-fun g12 () Int)
(declare-fun h12 (Int) Int)
(declare-fun u12 (Int Int) Int)
(declare-fun v12 (Int) Int)
(declare-fun f11 (Int) Int)
(declare-fun g11 (Int) Int)
(declare-fun h11 (Int) Int)
(declare-fun u11 (Int Int) Int)
(declare-fun v11 (Int) Int)
(declare-fun f10 (Int) Int)
(declare-fun g10 (Int) Int)
(declare-fun h10 (Int) Int)
(declare-fun u10 (Int Int) Int)
(declare-fun v10 (Int) Int)
(declare-fun f9 (Int) Int)
(declare-fun g9 () Int)
(declare-fun h9 (Int) Int)
(declare-fun u9 (Int Int) Int)
(declare-fun v9 (Int) Int)
(declare-fun f8 (Int) Int)
(declare-fun g8 (Int) Int)
(declare-fun t8 (Int) Int)
(declare-fun u8 (Int) Int)
(declare-fun v8 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f6 x) (divf x 2))))
(assert (forall ((x Int)) (= (g6 x) (modf x 2))))
(assert (forall ((x Int)) (= (h6 x) x)))
(assert (forall ((x Int) (y Int)) (= (u6 x y) (ite (<= x 0) y (f6 (u6 (- x 1) y))))))
(assert (forall ((x Int)) (= (v6 x) (u6 (g6 x) (h6 x)))))
(assert (forall ((x Int)) (= (f5 x) (v6 x))))
(assert (= f7 (+ 2 (+ 2 2))))
(assert (forall ((x Int)) (= (g7 x) (modf x 2))))
(assert (= h7 1))
(assert (forall ((x Int) (y Int)) (= (u7 x y) (ite (<= x 0) y f7))))
(assert (forall ((x Int)) (= (v7 x) (u7 (g7 x) h7))))
(assert (forall ((x Int)) (= (g5 x) (v7 x))))
(assert (forall ((x Int)) (= (h5 x) x)))
(assert (forall ((x Int) (y Int)) (= (u5 x y) (ite (<= x 0) y (f5 (u5 (- x 1) y))))))
(assert (forall ((x Int)) (= (v5 x) (u5 (g5 x) (h5 x)))))
(assert (forall ((x Int)) (= (f4 x) (+ 1 (v5 x)))))
(assert (= g4 1))
(assert (forall ((x Int)) (= (h4 x) (divf x 2))))
(assert (forall ((x Int) (y Int)) (= (u4 x y) (ite (<= x 0) y (f4 (u4 (- x 1) y))))))
(assert (forall ((x Int)) (= (v4 x) (u4 g4 (h4 x)))))
(assert (forall ((x Int)) (= (f3 x) (v4 x))))
(assert (forall ((x Int)) (= (g3 x) (modf x 2))))
(assert (forall ((x Int)) (= (h3 x) x)))
(assert (forall ((x Int) (y Int)) (= (u3 x y) (ite (<= x 0) y (f3 (u3 (- x 1) y))))))
(assert (forall ((x Int)) (= (v3 x) (u3 (g3 x) (h3 x)))))
(assert (forall ((x Int)) (= (f2 x) (divf (v3 x) 2))))
(assert (forall ((x Int)) (= (g2 x) (modf x 2))))
(assert (forall ((x Int)) (= (h2 x) (divf x 2))))
(assert (forall ((x Int) (y Int)) (= (u2 x y) (ite (<= x 0) y (f2 (u2 (- x 1) y))))))
(assert (forall ((x Int)) (= (v2 x) (u2 (g2 x) (h2 x)))))
(assert (forall ((x Int)) (= (f1 x) (+ (+ (modf (+ (v2 x) 1) 2) 1) x))))
(assert (= g1 2))
(assert (forall ((x Int)) (= (h1 x) x)))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y))))))
(assert (forall ((x Int)) (= (v1 x) (u1 g1 (h1 x)))))
(assert (forall ((x Int)) (= (f0 x) (modf (* (modf (divf (- (v1 x) x) 2) 2) 2) (+ 1 x)))))
(assert (forall ((x Int)) (= (g0 x) (+ 1 x))))
(assert (forall ((x Int)) (= (t0 x) (ite (<= (f0 x) 0) x (t0 (+ x 1))))))
(assert (forall ((x Int)) (= (u0 x) (ite (<= x 0) (t0 0) (t0 (+ (u0 (- x 1)) 1))))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x)))))
(assert (forall ((x Int)) (= (small x) (+ (divf (v0 x) 2) 1))))
(assert (forall ((x Int)) (= (f14 x) (divf x 2))))
(assert (forall ((x Int)) (= (g14 x) (modf x 2))))
(assert (forall ((x Int)) (= (h14 x) x)))
(assert (forall ((x Int) (y Int)) (= (u14 x y) (ite (<= x 0) y (f14 (u14 (- x 1) y))))))
(assert (forall ((x Int)) (= (v14 x) (u14 (g14 x) (h14 x)))))
(assert (forall ((x Int)) (= (f13 x) (v14 x))))
(assert (= f15 (+ 2 (+ 2 2))))
(assert (forall ((x Int)) (= (g15 x) (modf x 2))))
(assert (= h15 1))
(assert (forall ((x Int) (y Int)) (= (u15 x y) (ite (<= x 0) y f15))))
(assert (forall ((x Int)) (= (v15 x) (u15 (g15 x) h15))))
(assert (forall ((x Int)) (= (g13 x) (v15 x))))
(assert (forall ((x Int)) (= (h13 x) x)))
(assert (forall ((x Int) (y Int)) (= (u13 x y) (ite (<= x 0) y (f13 (u13 (- x 1) y))))))
(assert (forall ((x Int)) (= (v13 x) (u13 (g13 x) (h13 x)))))
(assert (forall ((x Int)) (= (f12 x) (+ 1 (v13 x)))))
(assert (= g12 1))
(assert (forall ((x Int)) (= (h12 x) (divf x 2))))
(assert (forall ((x Int) (y Int)) (= (u12 x y) (ite (<= x 0) y (f12 (u12 (- x 1) y))))))
(assert (forall ((x Int)) (= (v12 x) (u12 g12 (h12 x)))))
(assert (forall ((x Int)) (= (f11 x) (v12 x))))
(assert (forall ((x Int)) (= (g11 x) (modf x 2))))
(assert (forall ((x Int)) (= (h11 x) x)))
(assert (forall ((x Int) (y Int)) (= (u11 x y) (ite (<= x 0) y (f11 (u11 (- x 1) y))))))
(assert (forall ((x Int)) (= (v11 x) (u11 (g11 x) (h11 x)))))
(assert (forall ((x Int)) (= (f10 x) (divf (v11 x) 2))))
(assert (forall ((x Int)) (= (g10 x) (modf x 2))))
(assert (forall ((x Int)) (= (h10 x) (divf x 2))))
(assert (forall ((x Int) (y Int)) (= (u10 x y) (ite (<= x 0) y (f10 (u10 (- x 1) y))))))
(assert (forall ((x Int)) (= (v10 x) (u10 (g10 x) (h10 x)))))
(assert (forall ((x Int)) (= (f9 x) (+ (+ (modf (+ (v10 x) 1) 2) 1) x))))
(assert (= g9 2))
(assert (forall ((x Int)) (= (h9 x) x)))
(assert (forall ((x Int) (y Int)) (= (u9 x y) (ite (<= x 0) y (f9 (u9 (- x 1) y))))))
(assert (forall ((x Int)) (= (v9 x) (u9 g9 (h9 x)))))
(assert (forall ((x Int)) (= (f8 x) (modf (- (modf (- (v9 x) x) (+ 1 2)) 1) (+ 1 x)))))
(assert (forall ((x Int)) (= (g8 x) (+ 1 x))))
(assert (forall ((x Int)) (= (t8 x) (ite (<= (f8 x) 0) x (t8 (+ x 1))))))
(assert (forall ((x Int)) (= (u8 x) (ite (<= x 0) (t8 0) (t8 (+ (u8 (- x 1)) 1))))))
(assert (forall ((x Int)) (= (v8 x) (u8 (g8 x)))))
(assert (forall ((x Int)) (= (fast x) (- (+ (divf (+ (v8 x) 1) 2) x) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
