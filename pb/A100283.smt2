;; sequence(s): A100283
;; terms: 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0
;; small program: (if (((1 + (2 + (x + x))) mod loop((2 + x) * x, 2, 2)) mod (2 + 1)) <= 0 then 1 else 0) mod (1 + x)
;; fast program: (if ((((1 + x) mod (2 * (2 * (2 + (2 * (2 + 2)))))) - 1) mod (1 + 2)) <= 0 then 1 else 0) mod (1 + x)
(set-logic UFNIA)
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 () Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f0 x) (* (+ 2 x) x))))
(assert (= g0 2))
(assert (= h0 2))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (= v0 (u0 g0 h0)))
(assert (forall ((x Int)) (= (small x) (modf (ite (<= (modf (modf (+ 1 (+ 2 (+ x x))) v0) (+ 2 1)) 0) 1 0) (+ 1 x)))))
(assert (forall ((x Int)) (= (fast x) (modf (ite (<= (modf (- (modf (+ 1 x) (* 2 (* 2 (+ 2 (* 2 (+ 2 2)))))) 1) (+ 1 2)) 0) 1 0) (+ 1 x)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
