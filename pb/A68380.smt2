;; sequence(s): A68380
;; terms: 3 54 180 378 648 990 1404 1890 2448 3078 3780 4554 5400 6318 7308 8370 9504 10710 11988 13338
;; small program: (if x <= 0 then 1 else (loop(((2 + y) * x) + y, 2, x) * x)) * (1 + 2)
;; fast program: loop((1 + (2 + x)) * (if x <= 0 then 1 else x), 1, 2 * ((x + x) + x))
(set-logic UFNIA)
(declare-fun f0 (Int Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun f1 (Int) Int)
(declare-fun g1 () Int)
(declare-fun h1 (Int) Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (* (+ 2 y) x) y))))
(assert (= g0 2))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 g0 (h0 x)))))
(assert (forall ((x Int)) (= (small x) (* (ite (<= x 0) 1 (* (v0 x) x)) (+ 1 2)))))
(assert (forall ((x Int)) (= (f1 x) (* (+ 1 (+ 2 x)) (ite (<= x 0) 1 x)))))
(assert (= g1 1))
(assert (forall ((x Int)) (= (h1 x) (* 2 (+ (+ x x) x)))))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y))))))
(assert (forall ((x Int)) (= (v1 x) (u1 g1 (h1 x)))))
(assert (forall ((x Int)) (= (fast x) (v1 x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
