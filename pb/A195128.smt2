;; sequence(s): A195128
;; terms: 0 2 3 4 6 7 8 10 11 12 13 15 16 17 19 20 21 22 24 25
;; small program: loop(((((y * y) div (x + y)) + y) div x) + x, x, x)
;; fast program: (((2 * (2 * ((x + x) + x))) div (1 + (2 * (2 * (2 + (2 * (2 + 2))))))) + (if x <= 0 then 0 else 1)) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (divf (+ (divf (* y y) (+ x y)) y) x) x))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (divf (* 2 (* 2 (+ (+ x x) x))) (+ 1 (* 2 (* 2 (+ 2 (* 2 (+ 2 2))))))) (ite (<= x 0) 0 1)) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
