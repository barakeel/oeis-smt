;; sequence(s): A121283
;; terms: 0 8 17 25 34 42 51 59 68 76 85 93 102 111 119 128 136 145 153 162
;; small program: (2 * (2 * (x + x))) + (((x div (1 + (2 * (2 + (2 + 2))))) + x) div 2)
;; fast program: loop((x div (1 + (2 * (2 + (2 + 2))))) + x, 1, (2 * ((x + x) + x)) + x) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun small (Int) Int)
(declare-fun f0 (Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (small x) (+ (* 2 (* 2 (+ x x))) (divf (+ (divf x (+ 1 (* 2 (+ 2 (+ 2 2))))) x) 2)))))
(assert (forall ((x Int)) (= (f0 x) (+ (divf x (+ 1 (* 2 (+ 2 (+ 2 2))))) x))))
(assert (= g0 1))
(assert (forall ((x Int)) (= (h0 x) (+ (* 2 (+ (+ x x) x)) x))))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 g0 (h0 x)))))
(assert (forall ((x Int)) (= (fast x) (+ (v0 x) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
