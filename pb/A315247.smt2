;; sequence(s): A315247
;; terms: 1 6 10 15 19 25 31 35 40 44 50 56 60 65 69 75 81 85 90 94
;; small program: (((compr((loop((y - ((x div 2) div 2)) + y, x, 0) + x) mod 2, x) + 1) + x) + x) + x
;; fast program: (((((((((((((((2 + (x + x)) mod (1 + (2 + 2))) - 1) + x) * 2) + 1) + x) div (1 + 2)) + x) + x) + x) + x) + x) div (if x <= 0 then 1 else 2)) + x) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f1 (Int Int) Int)
(declare-fun g1 (Int) Int)
(declare-fun h1 () Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 (Int) Int)
(declare-fun f0 (Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun t0 (Int) Int)
(declare-fun u0 (Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f1 x y) (+ (- y (divf (divf x 2) 2)) y))))
(assert (forall ((x Int)) (= (g1 x) x)))
(assert (= h1 0))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v1 x) (u1 (g1 x) h1))))
(assert (forall ((x Int)) (= (f0 x) (modf (+ (v1 x) x) 2))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (forall ((x Int)) (= (t0 x) (ite (<= (f0 x) 0) x (t0 (+ x 1))))))
(assert (forall ((x Int)) (= (u0 x) (ite (<= x 0) (t0 0) (t0 (+ (u0 (- x 1)) 1))))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x)))))
(assert (forall ((x Int)) (= (small x) (+ (+ (+ (+ (v0 x) 1) x) x) x))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (divf (+ (+ (+ (+ (+ (divf (+ (+ (* (+ (- (modf (+ 2 (+ x x)) (+ 1 (+ 2 2))) 1) x) 2) 1) x) (+ 1 2)) x) x) x) x) x) (ite (<= x 0) 1 2)) x) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
