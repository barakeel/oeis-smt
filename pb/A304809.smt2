;; sequence(s): A304809
;; terms: 2 10 17 23 31 38 44 52 59 65 73 80 86 94 101 107 115 122 128 136
;; small program: (loop((((x * x) mod y) + x) + x, 1 + 2, x) - x) + 2
;; fast program: 2 + (((2 * ((x + x) + x)) + ((x * x) mod (1 + 2))) + x)
(set-logic UFNIA)
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (+ (modf (* x x) y) x) x))))
(assert (= g0 (+ 1 2)))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 g0 (h0 x)))))
(assert (forall ((x Int)) (= (small x) (+ (- (v0 x) x) 2))))
(assert (forall ((x Int)) (= (fast x) (+ 2 (+ (+ (* 2 (+ (+ x x) x)) (modf (* x x) (+ 1 2))) x)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
