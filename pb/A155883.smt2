;; sequence(s): A155883
;; terms: 1 33 173 505 1113 2081 3493 5433 7985 11233 15261 20153 25993 32865 40853 50041 60513 72353 85645 100473
;; small program: loop2((2 * ((x + x) + x)) + ((y * y) * y), 1 + (y + y), 2, 0, x)
;; fast program: (((1 + (((2 * ((1 + 2) * (1 + x))) + x) * x)) + 2) * (x + x)) + 1
(set-logic UFNIA)
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int Int) Int)
(declare-fun h0 () Int)
(declare-fun i0 () Int)
(declare-fun j0 (Int) Int)
(declare-fun u0 (Int Int Int) Int)
(declare-fun v0 (Int Int Int) Int)
(declare-fun w0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (* 2 (+ (+ x x) x)) (* (* y y) y)))))
(assert (forall ((x Int) (y Int)) (= (g0 x y) (+ 1 (+ y y)))))
(assert (= h0 2))
(assert (= i0 0))
(assert (forall ((x Int)) (= (j0 x) x)))
(assert (forall ((x Int) (y Int) (z Int)) (= (u0 x y z) (ite (<= x 0) y (f0 (u0 (- x 1) y z) (v0 (- x 1) y z))))))
(assert (forall ((x Int) (y Int) (z Int)) (= (v0 x y z) (ite (<= x 0) z (g0 (u0 (- x 1) y z) (v0 (- x 1) y z))))))
(assert (forall ((x Int)) (= (w0 x) (u0 h0 i0 (j0 x)))))
(assert (forall ((x Int)) (= (small x) (w0 x))))
(assert (forall ((x Int)) (= (fast x) (+ (* (+ (+ 1 (* (+ (* 2 (* (+ 1 2) (+ 1 x))) x) x)) 2) (+ x x)) 1))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
