;; sequence(s): A188468
;; terms: 2 4 5 7 10 12 13 15 18 20 23 25 26 28 31 33 34 36 39 41
;; small program: ((loop(1 + ((y * y) div (x + y)), x div 2, 1) + x) * 2) - (x div 2)
;; fast program: ((loop((((((2 * (x + x)) div (1 + (2 * (2 * (2 + 2))))) + x) div 2) * 2) - x, 1, x div 2) + 2) + x) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun f1 (Int) Int)
(declare-fun g1 () Int)
(declare-fun h1 (Int) Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ 1 (divf (* y y) (+ x y))))))
(assert (forall ((x Int)) (= (g0 x) (divf x 2))))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (- (* (+ (v0 x) x) 2) (divf x 2)))))
(assert (forall ((x Int)) (= (f1 x) (- (* (divf (+ (divf (* 2 (+ x x)) (+ 1 (* 2 (* 2 (+ 2 2))))) x) 2) 2) x))))
(assert (= g1 1))
(assert (forall ((x Int)) (= (h1 x) (divf x 2))))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y))))))
(assert (forall ((x Int)) (= (v1 x) (u1 g1 (h1 x)))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (+ (v1 x) 2) x) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
