;; sequence(s): A299283
;; terms: 1 7 22 48 84 130 186 253 330 417 514 622 740 868 1006 1155 1314 1483 1662 1852
;; small program: (((loop((x * x) + x, 2, 2) - 1) * (x * x)) div (2 * (2 + 2))) + (if x <= 0 then 1 else 2)
;; fast program: (((1 + (2 * (2 * (2 + (2 * (2 + 2)))))) * (x * x)) div (2 * (2 + 2))) + (if x <= 0 then 1 else 2)
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 () Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f0 x) (+ (* x x) x))))
(assert (= g0 2))
(assert (= h0 2))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (= v0 (u0 g0 h0)))
(assert (forall ((x Int)) (= (small x) (+ (divf (* (- v0 1) (* x x)) (* 2 (+ 2 2))) (ite (<= x 0) 1 2)))))
(assert (forall ((x Int)) (= (fast x) (+ (divf (* (+ 1 (* 2 (* 2 (+ 2 (* 2 (+ 2 2)))))) (* x x)) (* 2 (+ 2 2))) (ite (<= x 0) 1 2)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
