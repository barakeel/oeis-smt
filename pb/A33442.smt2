;; sequence(s): A33442
;; terms: 0 0 1 3 6 10 15 21 28 36 45 54 64 75 87 100 114 129 145 162
;; small program: loop(((y div (0 - (2 + (2 * (2 + 2))))) + x) + y, x, 0)
;; fast program: ((((1 + 2) * (x * x)) div (2 + (2 * (2 + 2)))) * (1 + 2)) div 2
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (+ (divf y (- 0 (+ 2 (* 2 (+ 2 2))))) x) y))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 0))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int)) (= (fast x) (divf (* (divf (* (+ 1 2) (* x x)) (+ 2 (* 2 (+ 2 2)))) (+ 1 2)) 2))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
