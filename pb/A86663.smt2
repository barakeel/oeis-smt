;; sequence(s): A86663
;; terms: 1 4 4 8 12 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68
;; small program: loop((((2 + (y * y)) div (2 + y)) * 2) * 2, x, 1)
;; fast program: (((((2 + (2 + ((x * x) + x))) div (2 + x)) * 2) - 1) * (if x <= 0 then 1 else 2)) - 2
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (* (* (divf (+ 2 (* y y)) (+ 2 y)) 2) 2))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int)) (= (fast x) (- (* (- (* (divf (+ 2 (+ 2 (+ (* x x) x))) (+ 2 x)) 2) 1) (ite (<= x 0) 1 2)) 2))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
