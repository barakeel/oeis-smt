;; sequence(s): A198272
;; terms: 0 4 8 12 16 21 25 29 33 37 41 45 49 54 58 62 66 70 74 78
;; small program: (loop(x - (x div 2), 2, x) div 2) + (2 * (x + x))
;; fast program: (2 * (x + x)) + ((1 + (2 + x)) div (2 * (2 + 2)))
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f0 x) (- x (divf x 2)))))
(assert (= g0 2))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 g0 (h0 x)))))
(assert (forall ((x Int)) (= (small x) (+ (divf (v0 x) 2) (* 2 (+ x x))))))
(assert (forall ((x Int)) (= (fast x) (+ (* 2 (+ x x)) (divf (+ 1 (+ 2 x)) (* 2 (+ 2 2)))))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
