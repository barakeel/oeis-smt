;; sequence(s): A187342
;; terms: 1 3 4 6 7 9 10 12 14 15 17 18 20 21 23 25 26 28 29 31
;; small program: (((1 + (((x - (x div (1 + 2))) div (1 + (2 + 2))) + x)) div 2) + 1) + x
;; fast program: loop(((((x + x) div ((2 * (2 * (2 + 2))) - 1)) + x) div 2) + x, 1, 1 + x)
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun small (Int) Int)
(declare-fun f0 (Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (small x) (+ (+ (divf (+ 1 (+ (divf (- x (divf x (+ 1 2))) (+ 1 (+ 2 2))) x)) 2) 1) x))))
(assert (forall ((x Int)) (= (f0 x) (+ (divf (+ (divf (+ x x) (- (* 2 (* 2 (+ 2 2))) 1)) x) 2) x))))
(assert (= g0 1))
(assert (forall ((x Int)) (= (h0 x) (+ 1 x))))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 g0 (h0 x)))))
(assert (forall ((x Int)) (= (fast x) (v0 x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
