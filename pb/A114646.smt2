;; sequence(s): A114646
;; terms: 1 47 117 187 257 327 397 467 537 607 677 747 817 887 957 1027 1097 1167 1237 1307
;; small program: (loop2((2 * ((x + x) + x)) - y, x, 2, x, if x <= 0 then 0 else 2) * 2) + 1
;; fast program: ((((1 + (2 * (2 * (2 * (((x - (if x <= 0 then 0 else 1)) + x) + x))))) * (1 + 2)) - x) - x) - 2
(set-logic UFNIA)
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun i0 (Int) Int)
(declare-fun j0 (Int) Int)
(declare-fun u0 (Int Int Int) Int)
(declare-fun v0 (Int Int Int) Int)
(declare-fun w0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (- (* 2 (+ (+ x x) x)) y))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 2))
(assert (forall ((x Int)) (= (i0 x) x)))
(assert (forall ((x Int)) (= (j0 x) (ite (<= x 0) 0 2))))
(assert (forall ((x Int) (y Int) (z Int)) (= (u0 x y z) (ite (<= x 0) y (f0 (u0 (- x 1) y z) (v0 (- x 1) y z))))))
(assert (forall ((x Int) (y Int) (z Int)) (= (v0 x y z) (ite (<= x 0) z (g0 (u0 (- x 1) y z))))))
(assert (forall ((x Int)) (= (w0 x) (u0 h0 (i0 x) (j0 x)))))
(assert (forall ((x Int)) (= (small x) (+ (* (w0 x) 2) 1))))
(assert (forall ((x Int)) (= (fast x) (- (- (- (* (+ 1 (* 2 (* 2 (* 2 (+ (+ (- x (ite (<= x 0) 0 1)) x) x))))) (+ 1 2)) x) x) 2))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
