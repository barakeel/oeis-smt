;; sequence(s): A188167
;; terms: 0 2 1 6 8 10 3 14 16 18 5 22 24 26 7 30 32 34 9 38
;; small program: if ((2 + x) mod (2 + 2)) <= 0 then (x div 2) else (x + x)
;; fast program: loop(0 - (x div 2), ((1 + x) mod (2 + 2)) - 2, x) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun small (Int) Int)
(declare-fun f0 (Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (small x) (ite (<= (modf (+ 2 x) (+ 2 2)) 0) (divf x 2) (+ x x)))))
(assert (forall ((x Int)) (= (f0 x) (- 0 (divf x 2)))))
(assert (forall ((x Int)) (= (g0 x) (- (modf (+ 1 x) (+ 2 2)) 2))))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (forall ((x Int)) (= (fast x) (+ (v0 x) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
