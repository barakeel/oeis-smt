;; sequence(s): A243903
;; terms: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
;; small program: (if (x - loop((2 + y) * x, 2, 2)) <= 0 then 1 else (2 + 2)) + x
;; fast program: loop(2 + 2, x - (((2 + 2) * (1 + 2)) * 2), 1) + x
(set-logic UFNIA)
(declare-fun f0 (Int Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 () Int)
(declare-fun small (Int) Int)
(declare-fun f1 () Int)
(declare-fun g1 (Int) Int)
(declare-fun h1 () Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (* (+ 2 y) x))))
(assert (= g0 2))
(assert (= h0 2))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (= v0 (u0 g0 h0)))
(assert (forall ((x Int)) (= (small x) (+ (ite (<= (- x v0) 0) 1 (+ 2 2)) x))))
(assert (= f1 (+ 2 2)))
(assert (forall ((x Int)) (= (g1 x) (- x (* (* (+ 2 2) (+ 1 2)) 2)))))
(assert (= h1 1))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y f1))))
(assert (forall ((x Int)) (= (v1 x) (u1 (g1 x) h1))))
(assert (forall ((x Int)) (= (fast x) (+ (v1 x) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
