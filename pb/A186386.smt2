;; sequence(s): A186386
;; terms: 1 2 4 5 7 10 12 15 17 20 24 27 31 34 38 43 47 52 56 61
;; small program: 1 + ((loop(x + y, x, x) div (1 + (2 + 2))) + x)
;; fast program: 1 + (((((2 + x) * x) + x) div (2 + (2 * (2 + 2)))) + x)
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ x y))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (forall ((x Int)) (= (small x) (+ 1 (+ (divf (v0 x) (+ 1 (+ 2 2))) x)))))
(assert (forall ((x Int)) (= (fast x) (+ 1 (+ (divf (+ (* (+ 2 x) x) x) (+ 2 (* 2 (+ 2 2)))) x)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
