;; sequence(s): A100174
;; terms: 1 14 59 156 325 586 959 1464 2121 2950 3971 5204 6669 8386 10375 12656 15249 18174 21451 25100
;; small program: 1 + loop((2 * ((((2 * (y + y)) + y) * y) + y)) + x, x, x)
;; fast program: (1 + (2 * (((1 + x) * (((2 * (2 + (x + x))) + x) * x)) div (1 + 2)))) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (* 2 (+ (* (+ (* 2 (+ y y)) y) y) y)) x))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (forall ((x Int)) (= (small x) (+ 1 (v0 x)))))
(assert (forall ((x Int)) (= (fast x) (+ (+ 1 (* 2 (divf (* (+ 1 x) (* (+ (* 2 (+ 2 (+ x x))) x) x)) (+ 1 2)))) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
