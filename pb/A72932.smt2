;; sequence(s): A72932
;; terms: 1 2 3 4 5 5 6 7 8 9 10 11 12 13 14 15 15 16 17 18
;; small program: (((2 + loop2(y - x, x, 2 + 2, 2, x)) div ((((2 * (2 + 2)) * 2) * 2) + 2)) + 1) + x
;; fast program: (((2 * ((1 + 2) * (2 + ((2 * (x + x)) + x)))) + x) div (2 + (2 * (2 * (2 * (2 + 2)))))) + 1
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun i0 () Int)
(declare-fun j0 (Int) Int)
(declare-fun u0 (Int Int Int) Int)
(declare-fun v0 (Int Int Int) Int)
(declare-fun w0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (- y x))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 (+ 2 2)))
(assert (= i0 2))
(assert (forall ((x Int)) (= (j0 x) x)))
(assert (forall ((x Int) (y Int) (z Int)) (= (u0 x y z) (ite (<= x 0) y (f0 (u0 (- x 1) y z) (v0 (- x 1) y z))))))
(assert (forall ((x Int) (y Int) (z Int)) (= (v0 x y z) (ite (<= x 0) z (g0 (u0 (- x 1) y z))))))
(assert (forall ((x Int)) (= (w0 x) (u0 h0 i0 (j0 x)))))
(assert (forall ((x Int)) (= (small x) (+ (+ (divf (+ 2 (w0 x)) (+ (* (* (* 2 (+ 2 2)) 2) 2) 2)) 1) x))))
(assert (forall ((x Int)) (= (fast x) (+ (divf (+ (* 2 (* (+ 1 2) (+ 2 (+ (* 2 (+ x x)) x)))) x) (+ 2 (* 2 (* 2 (* 2 (+ 2 2)))))) 1))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
