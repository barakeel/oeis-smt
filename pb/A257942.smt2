;; sequence(s): A257942
;; terms: 1 3 12 20 15 21 56 72 45 55 132 156 91 105 240 272 153 171 380 420
;; small program: ((1 + x) * (2 + x)) div (2 - ((x div 2) mod 2))
;; fast program: loop((2 - (x mod 2)) * x, 1, ((1 + x) * (2 + x)) div 2)
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun small (Int) Int)
(declare-fun f0 (Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (small x) (divf (* (+ 1 x) (+ 2 x)) (- 2 (modf (divf x 2) 2))))))
(assert (forall ((x Int)) (= (f0 x) (* (- 2 (modf x 2)) x))))
(assert (= g0 1))
(assert (forall ((x Int)) (= (h0 x) (divf (* (+ 1 x) (+ 2 x)) 2))))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 g0 (h0 x)))))
(assert (forall ((x Int)) (= (fast x) (v0 x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
