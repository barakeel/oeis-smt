;; sequence(s): A175109
;; terms: 1 13 63 171 365 665 1099 1687 2457 3429 4631 6083 7813 9841 12195 14895 17969 21437 25327 29659
;; small program: ((1 + x) * loop((x + y) + y, x + x, 1)) - (x mod 2)
;; fast program: (2 * (((1 + (x + x)) * ((x * x) + x)) + (x div 2))) + 1
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (+ x y) y))))
(assert (forall ((x Int)) (= (g0 x) (+ x x))))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (- (* (+ 1 x) (v0 x)) (modf x 2)))))
(assert (forall ((x Int)) (= (fast x) (+ (* 2 (+ (* (+ 1 (+ x x)) (+ (* x x) x)) (divf x 2))) 1))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
