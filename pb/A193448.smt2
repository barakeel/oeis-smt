;; sequence(s): A193448
;; terms: 4 44 124 244 404 604 844 1124 1444 1804 2204 2644 3124 3644 4204 4804 5444 6124 6844 7604
;; small program: loop2((1 + (y + y)) * (x * x), 2, 2, 1, x) - 1
;; fast program: 2 * (2 + (2 * ((1 + (2 + 2)) * ((x * x) + x))))
(set-logic UFNIA)
(declare-fun f0 (Int Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 () Int)
(declare-fun i0 () Int)
(declare-fun j0 (Int) Int)
(declare-fun u0 (Int Int Int) Int)
(declare-fun v0 (Int Int Int) Int)
(declare-fun w0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (* (+ 1 (+ y y)) (* x x)))))
(assert (= g0 2))
(assert (= h0 2))
(assert (= i0 1))
(assert (forall ((x Int)) (= (j0 x) x)))
(assert (forall ((x Int) (y Int) (z Int)) (= (u0 x y z) (ite (<= x 0) y (f0 (u0 (- x 1) y z) (v0 (- x 1) y z))))))
(assert (forall ((x Int) (y Int) (z Int)) (= (v0 x y z) (ite (<= x 0) z g0))))
(assert (forall ((x Int)) (= (w0 x) (u0 h0 i0 (j0 x)))))
(assert (forall ((x Int)) (= (small x) (- (w0 x) 1))))
(assert (forall ((x Int)) (= (fast x) (* 2 (+ 2 (* 2 (* (+ 1 (+ 2 2)) (+ (* x x) x))))))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
