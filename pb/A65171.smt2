;; sequence(s): A65171
;; terms: 1 4 2 8 3 12 6 16 5 20 10 24 7 28 14 32 9 36 18 40
;; small program: loop(((if (x mod 2) <= 0 then ((x div 2) mod 2) else x) + x) - 1, 2, 2 + x) div 2
;; fast program: (((1 + (if (x mod (2 + 2)) <= 0 then 2 else x)) + ((2 + x) mod 2)) + x) div (2 - (x mod 2))
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f0 x) (- (+ (ite (<= (modf x 2) 0) (modf (divf x 2) 2) x) x) 1))))
(assert (= g0 2))
(assert (forall ((x Int)) (= (h0 x) (+ 2 x))))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 g0 (h0 x)))))
(assert (forall ((x Int)) (= (small x) (divf (v0 x) 2))))
(assert (forall ((x Int)) (= (fast x) (divf (+ (+ (+ 1 (ite (<= (modf x (+ 2 2)) 0) 2 x)) (modf (+ 2 x) 2)) x) (- 2 (modf x 2))))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
