;; sequence(s): A109052
;; terms: 0 11 22 33 44 55 66 77 88 99 110 11 132 143 154 165 176 187 198 209
;; small program: (if (x mod loop(1 + (x + x), 2, 2)) <= 0 then 1 else loop(1 + (x + x), 2, 2)) * x
;; fast program: ((x + x) * (if (x mod (1 + (2 + (2 * (2 + 2))))) <= 0 then 1 else (2 + (2 + 2)))) - x
(set-logic UFNIA)
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 () Int)
(declare-fun f1 (Int) Int)
(declare-fun g1 () Int)
(declare-fun h1 () Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 () Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f0 x) (+ 1 (+ x x)))))
(assert (= g0 2))
(assert (= h0 2))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (= v0 (u0 g0 h0)))
(assert (forall ((x Int)) (= (f1 x) (+ 1 (+ x x)))))
(assert (= g1 2))
(assert (= h1 2))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y))))))
(assert (= v1 (u1 g1 h1)))
(assert (forall ((x Int)) (= (small x) (* (ite (<= (modf x v0) 0) 1 v1) x))))
(assert (forall ((x Int)) (= (fast x) (- (* (+ x x) (ite (<= (modf x (+ 1 (+ 2 (* 2 (+ 2 2))))) 0) 1 (+ 2 (+ 2 2)))) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
