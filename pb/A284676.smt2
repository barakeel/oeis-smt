;; sequence(s): A284676
;; terms: 2 3 4 5 7 8 9 11 12 13 15 16 17 18 20 21 22 24 25 26
;; small program: loop(2 + (((y * y) div ((x + y) + y)) + y), x, 2)
;; fast program: (((((if x <= 0 then 1 else x) - 1) - (x div (1 + (2 + (2 * (2 + 2)))))) div (1 + 2)) + x) + 2
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ 2 (+ (divf (* y y) (+ (+ x y) y)) y)))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 2))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (divf (- (- (ite (<= x 0) 1 x) 1) (divf x (+ 1 (+ 2 (* 2 (+ 2 2)))))) (+ 1 2)) x) 2))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
