;; sequence(s): A47515
;; terms: 0 3 4 6 7 8 11 12 14 15 16 19 20 22 23 24 27 28 30 31
;; small program: loop(x - ((0 - (x * y)) div (2 + (2 + y))), 2, x)
;; fast program: ((((1 + 2) * (((x - 1) + x) div (1 + (2 + 2)))) div 2) + 2) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (- x (divf (- 0 (* x y)) (+ 2 (+ 2 y)))))))
(assert (= g0 2))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 g0 (h0 x)))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (divf (* (+ 1 2) (divf (+ (- x 1) x) (+ 1 (+ 2 2)))) 2) 2) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
