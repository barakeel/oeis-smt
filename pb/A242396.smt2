;; sequence(s): A242396
;; terms: 4 6 8 10 12 14 18 20 22 24 26 28 32 34 36 38 40 42 44 48
;; small program: ((loop(((y - (x div 2)) div (1 + 2)) div 2, x, 0) + 2) + x) * 2
;; fast program: 2 * (2 + (((2 + (x + x)) div ((((2 + 2) + 2) * 2) + 1)) + x))
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (divf (divf (- y (divf x 2)) (+ 1 2)) 2))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 0))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (* (+ (+ (v0 x) 2) x) 2))))
(assert (forall ((x Int)) (= (fast x) (* 2 (+ 2 (+ (divf (+ 2 (+ x x)) (+ (* (+ (+ 2 2) 2) 2) 1)) x))))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
