;; sequence(s): A267755
;; terms: 1 3 4 5 9 12 14 15 16 20 23 25 26 27 31 34 36 37 38 42
;; small program: loop((((1 - ((x div 2) div 2)) mod (2 + 2)) + 2) + x, x, 1) - x
;; fast program: ((((((((2 - (((2 + ((x + x) + x)) * x) mod (1 + (2 + 2)))) + x) + x) + x) * (1 + 2)) - 1) + x) + x) div (1 + (2 + 2))
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f0 x) (+ (+ (modf (- 1 (divf (divf x 2) 2)) (+ 2 2)) 2) x))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (- (v0 x) x))))
(assert (forall ((x Int)) (= (fast x) (divf (+ (+ (- (* (+ (+ (+ (- 2 (modf (* (+ 2 (+ (+ x x) x)) x) (+ 1 (+ 2 2)))) x) x) x) (+ 1 2)) 1) x) x) (+ 1 (+ 2 2))))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
