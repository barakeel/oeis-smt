;; sequence(s): A236678
;; terms: 1 1 2 2 2 2 2 2 3 3 4 4 4 4 4 4 5 5 6 6
;; small program: (loop((x mod 2) + y, x div 2, 1) div 2) + 1
;; fast program: (2 + ((x - 2) div (2 * (2 + 2)))) + (x div (2 * (2 + 2)))
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (modf x 2) y))))
(assert (forall ((x Int)) (= (g0 x) (divf x 2))))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (+ (divf (v0 x) 2) 1))))
(assert (forall ((x Int)) (= (fast x) (+ (+ 2 (divf (- x 2) (* 2 (+ 2 2)))) (divf x (* 2 (+ 2 2)))))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
