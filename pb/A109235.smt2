;; sequence(s): A109235
;; terms: 6 13 20 26 33 40 46 53 60 67 73 80 87 93 100 107 114 120 127 134
;; small program: ((loop(2 * (2 + x), 2, 2) * (1 + x)) + (((x div 2) div 2) div 2)) div (1 + 2)
;; fast program: ((2 * ((1 + (2 + 2)) * (2 + (x + x)))) + (x div (2 * (2 + 2)))) div (1 + 2)
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 () Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f0 x) (* 2 (+ 2 x)))))
(assert (= g0 2))
(assert (= h0 2))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (= v0 (u0 g0 h0)))
(assert (forall ((x Int)) (= (small x) (divf (+ (* v0 (+ 1 x)) (divf (divf (divf x 2) 2) 2)) (+ 1 2)))))
(assert (forall ((x Int)) (= (fast x) (divf (+ (* 2 (* (+ 1 (+ 2 2)) (+ 2 (+ x x)))) (divf x (* 2 (+ 2 2)))) (+ 1 2)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
