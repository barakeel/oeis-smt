;; sequence(s): A58321
;; terms: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
;; small program: loop(loop(2, x, x), 2, (2 * (2 * (2 * (2 + 2)))) - x) + x
;; fast program: if (1 + (x - (2 * (2 * (2 * (2 + 2)))))) <= 0 then (2 + x) else (2 * (2 * (2 * (2 + 2))))
(set-logic UFNIA)
(declare-fun f1 () Int)
(declare-fun g1 (Int) Int)
(declare-fun h1 (Int) Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 (Int) Int)
(declare-fun f0 (Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (= f1 2))
(assert (forall ((x Int)) (= (g1 x) x)))
(assert (forall ((x Int)) (= (h1 x) x)))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y f1))))
(assert (forall ((x Int)) (= (v1 x) (u1 (g1 x) (h1 x)))))
(assert (forall ((x Int)) (= (f0 x) (v1 x))))
(assert (= g0 2))
(assert (forall ((x Int)) (= (h0 x) (- (* 2 (* 2 (* 2 (+ 2 2)))) x))))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 g0 (h0 x)))))
(assert (forall ((x Int)) (= (small x) (+ (v0 x) x))))
(assert (forall ((x Int)) (= (fast x) (ite (<= (+ 1 (- x (* 2 (* 2 (* 2 (+ 2 2)))))) 0) (+ 2 x) (* 2 (* 2 (* 2 (+ 2 2))))))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
