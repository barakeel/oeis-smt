;; sequence(s): A302405
;; terms: 0 1 2 2 4 4 4 5 6 6 8 8 8 9 10 10 12 12 12 13
;; small program: loop(((x div 2) mod 2) + y, x - (x div (1 + 2)), 0)
;; fast program: ((if ((2 + x) mod (2 + (2 + 2))) <= 0 then 1 else 0) - (x div (1 + 2))) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (modf (divf x 2) 2) y))))
(assert (forall ((x Int)) (= (g0 x) (- x (divf x (+ 1 2))))))
(assert (= h0 0))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int)) (= (fast x) (+ (- (ite (<= (modf (+ 2 x) (+ 2 (+ 2 2))) 0) 1 0) (divf x (+ 1 2))) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
