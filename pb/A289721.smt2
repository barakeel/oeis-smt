;; sequence(s): A289721
;; terms: 1 9 45 135 306 585 999 1575 2340 3321 4545 6039 7830 9945 12411 15255 18504 22185 26325 30951
;; small program: loop((y div 2) + y, x * ((1 + 2) * ((x * x) + 1)), 1)
;; fast program: ((((if x <= 0 then 1 else x) + x) + x) * ((1 + (x * x)) * (1 + 2))) div 2
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (divf y 2) y))))
(assert (forall ((x Int)) (= (g0 x) (* x (* (+ 1 2) (+ (* x x) 1))))))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int)) (= (fast x) (divf (* (+ (+ (ite (<= x 0) 1 x) x) x) (* (+ 1 (* x x)) (+ 1 2))) 2))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
