;; sequence(s): A63198
;; terms: 0 1 3 1 3 5 3 5 7 5 7 9 7 9 11 9 11 13 11 13
;; small program: ((x mod (1 + 2)) - 1) + loop(y - (x div 2), x, 1)
;; fast program: (((if x <= 0 then 1 else x) - 1) - (2 * (2 * (x div (1 + 2))))) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (- y (divf x 2)))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (+ (- (modf x (+ 1 2)) 1) (v0 x)))))
(assert (forall ((x Int)) (= (fast x) (+ (- (- (ite (<= x 0) 1 x) 1) (* 2 (* 2 (divf x (+ 1 2))))) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
