;; sequence(s): A167861-A167962-A168723-A168771-A168819-A168867-A168915-A168963-A169011-A169059-A169107-A169155-A169203-A169251-A169299-A169347-A169395-A169443-A169491-A169539-A170007-A170055-A170103-A170151-A170199-A170247-A170295-A170343-A170391-A170439-A170487-A170535-A170583-A170631-A170679-A170727-A170765
;; terms: 1 46 2070 93150 4191750 188628750 8488293750 381973218750 17188794843750 773495767968750 34807309558593750 1566328930136718750 70484801856152343750 3171816083526855468750 142731723758708496093750
;; small program: loop((loop((2 + (2 + x)) * x, 2, 1) * x) + (1 div x), x, 1)
;; fast program: loop2(x * y, y, x - 1, 1, 1 + (2 * (2 + (2 * (2 + (2 * (2 + 2))))))) * (if x <= 0 then 1 else (2 + (2 * (2 + (2 * (2 + (2 * (2 + 2))))))))
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f1 (Int) Int)
(declare-fun g1 () Int)
(declare-fun h1 () Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 () Int)
(declare-fun f0 (Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun f2 (Int Int) Int)
(declare-fun g2 (Int Int) Int)
(declare-fun h2 (Int) Int)
(declare-fun i2 () Int)
(declare-fun j2 () Int)
(declare-fun u2 (Int Int Int) Int)
(declare-fun v2 (Int Int Int) Int)
(declare-fun w2 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f1 x) (* (+ 2 (+ 2 x)) x))))
(assert (= g1 2))
(assert (= h1 1))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y))))))
(assert (= v1 (u1 g1 h1)))
(assert (forall ((x Int)) (= (f0 x) (+ (* v1 x) (divf 1 x)))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int) (y Int)) (= (f2 x y) (* x y))))
(assert (forall ((x Int) (y Int)) (= (g2 x y) y)))
(assert (forall ((x Int)) (= (h2 x) (- x 1))))
(assert (= i2 1))
(assert (= j2 (+ 1 (* 2 (+ 2 (* 2 (+ 2 (* 2 (+ 2 2)))))))))
(assert (forall ((x Int) (y Int) (z Int)) (= (u2 x y z) (ite (<= x 0) y (f2 (u2 (- x 1) y z) (v2 (- x 1) y z))))))
(assert (forall ((x Int) (y Int) (z Int)) (= (v2 x y z) (ite (<= x 0) z (g2 (u2 (- x 1) y z) (v2 (- x 1) y z))))))
(assert (forall ((x Int)) (= (w2 x) (u2 (h2 x) i2 j2))))
(assert (forall ((x Int)) (= (fast x) (* (w2 x) (ite (<= x 0) 1 (+ 2 (* 2 (+ 2 (* 2 (+ 2 (* 2 (+ 2 2))))))))))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
