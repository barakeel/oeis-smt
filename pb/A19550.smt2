;; sequence(s): A19550
;; terms: 12 24 36 48 510 612 714 816 918 1020 1122 1224 1326 1428 1530 1632 1734 1836 1938 2040
;; small program: ((loop(1 + (2 * (2 * (2 + 2))), (x - 1) - 2, 2) * 2) * (1 + 2)) * (1 + x)
;; fast program: (((((((loop(x * x, 1, loop(1, 2 + (2 - x), 2 + 2)) * (1 + x)) * (1 + 2)) + 1) + x) + 2) + x) + x) * 2
(set-logic UFNIA)
(declare-fun f0 () Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun f1 (Int) Int)
(declare-fun g1 () Int)
(declare-fun f2 () Int)
(declare-fun g2 (Int) Int)
(declare-fun h2 () Int)
(declare-fun u2 (Int Int) Int)
(declare-fun v2 (Int) Int)
(declare-fun h1 (Int) Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 (Int) Int)
(declare-fun fast (Int) Int)
(assert (= f0 (+ 1 (* 2 (* 2 (+ 2 2))))))
(assert (forall ((x Int)) (= (g0 x) (- (- x 1) 2))))
(assert (= h0 2))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y f0))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (* (* (* (v0 x) 2) (+ 1 2)) (+ 1 x)))))
(assert (forall ((x Int)) (= (f1 x) (* x x))))
(assert (= g1 1))
(assert (= f2 1))
(assert (forall ((x Int)) (= (g2 x) (+ 2 (- 2 x)))))
(assert (= h2 (+ 2 2)))
(assert (forall ((x Int) (y Int)) (= (u2 x y) (ite (<= x 0) y f2))))
(assert (forall ((x Int)) (= (v2 x) (u2 (g2 x) h2))))
(assert (forall ((x Int)) (= (h1 x) (v2 x))))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y))))))
(assert (forall ((x Int)) (= (v1 x) (u1 g1 (h1 x)))))
(assert (forall ((x Int)) (= (fast x) (* (+ (+ (+ (+ (+ (* (* (v1 x) (+ 1 x)) (+ 1 2)) 1) x) 2) x) x) 2))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
