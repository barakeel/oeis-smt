;; sequence(s): A28740
;; terms: 2 3 5 6 8 11 12 14 15 17 18 20 21 23 24 26
;; small program: 2 + (((loop(1 + 2, (x - 2) - 2, 0) + x) div 2) + x)
;; fast program: ((((if ((x - 2) - 2) <= 0 then 0 else (1 + 2)) + x) div 2) + 2) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 () Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (= f0 (+ 1 2)))
(assert (forall ((x Int)) (= (g0 x) (- (- x 2) 2))))
(assert (= h0 0))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y f0))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (+ 2 (+ (divf (+ (v0 x) x) 2) x)))))
(assert (forall ((x Int)) (= (fast x) (+ (+ (divf (+ (ite (<= (- (- x 2) 2) 0) 0 (+ 1 2)) x) 2) 2) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
