;; sequence(s): A131509
;; terms: 1 4 33 220 1005 3456 9709 23528 50985 101260 187561 328164 547573 877800 1359765 2044816 2996369 4291668 6023665 8303020
;; small program: (((((loop(((y * y) - y) + x, x, x) * x) + x) div 2) * x) + 1) * (1 + x)
;; fast program: ((((((((2 + (x * x)) * x) div (1 + 2)) * x) + x) div 2) * x) + 1) * (1 + x)
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (- (* y y) y) x))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (forall ((x Int)) (= (small x) (* (+ (* (divf (+ (* (v0 x) x) x) 2) x) 1) (+ 1 x)))))
(assert (forall ((x Int)) (= (fast x) (* (+ (* (divf (+ (* (divf (* (+ 2 (* x x)) x) (+ 1 2)) x) x) 2) x) 1) (+ 1 x)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
