;; sequence(s): A59293
;; terms: 1 0 0 1 3 6 9 13 18 24 31 39 47 56 66 77 89 102 115 129
;; small program: loop(((x - 2) - ((y div 2) div (1 + 2))) + y, x, 1)
;; fast program: ((((x - 2) * x) - (((2 + x) * x) div (2 + (2 + 2)))) div 2) + 1
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (- (- x 2) (divf (divf y 2) (+ 1 2))) y))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int)) (= (fast x) (+ (divf (- (* (- x 2) x) (divf (* (+ 2 x) x) (+ 2 (+ 2 2)))) 2) 1))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
