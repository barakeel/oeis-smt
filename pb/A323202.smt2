;; sequence(s): A323202
;; terms: 1 ~1 0 ~1 2 ~1 0 ~1 2 ~1 0 ~1 2 ~1 0 ~1 2 ~1 0 ~1
;; small program: loop((if x <= 0 then 2 else 0) - (y mod (2 + 2)), x, 1)
;; fast program: (if (x mod (2 + 2)) <= 0 then (if x <= 0 then 1 else 2) else 0) - (x mod 2)
(set-logic UFNIA)
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (- (ite (<= x 0) 2 0) (modf y (+ 2 2))))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int)) (= (fast x) (- (ite (<= (modf x (+ 2 2)) 0) (ite (<= x 0) 1 2) 0) (modf x 2)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
