;; sequence(s): A167849-A167959-A168720-A168768-A168816-A168864-A168912-A168960-A169008-A169056-A169104-A169152-A169200-A169248-A169296-A169344-A169392-A169440-A169488-A169536-A170004-A170052-A170100-A170148-A170196-A170244-A170292-A170340-A170388-A170436-A170484-A170532-A170580-A170628-A170676-A170724-A170762
;; terms: 1 43 1806 75852 3185784 133802928 5619722976 236028364992 9913191329664 416354035845888 17486869505527296 734448519232146432 30846837807750150144 1295567187925506306048 54413821892871264854016
;; small program: loop((loop((x * x) + x, 2, 2) * x) + (1 div x), x, 1)
;; fast program: loop2(x * y, y, x - 1, 1, 2 + (2 * (2 * (2 + (2 * (2 + 2)))))) * (if x <= 0 then 1 else (1 + (2 + (2 * (2 * (2 + (2 * (2 + 2))))))))
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f1 (Int) Int)
(declare-fun g1 () Int)
(declare-fun h1 () Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 () Int)
(declare-fun f0 (Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun f2 (Int Int) Int)
(declare-fun g2 (Int Int) Int)
(declare-fun h2 (Int) Int)
(declare-fun i2 () Int)
(declare-fun j2 () Int)
(declare-fun u2 (Int Int Int) Int)
(declare-fun v2 (Int Int Int) Int)
(declare-fun w2 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f1 x) (+ (* x x) x))))
(assert (= g1 2))
(assert (= h1 2))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y))))))
(assert (= v1 (u1 g1 h1)))
(assert (forall ((x Int)) (= (f0 x) (+ (* v1 x) (divf 1 x)))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int) (y Int)) (= (f2 x y) (* x y))))
(assert (forall ((x Int) (y Int)) (= (g2 x y) y)))
(assert (forall ((x Int)) (= (h2 x) (- x 1))))
(assert (= i2 1))
(assert (= j2 (+ 2 (* 2 (* 2 (+ 2 (* 2 (+ 2 2))))))))
(assert (forall ((x Int) (y Int) (z Int)) (= (u2 x y z) (ite (<= x 0) y (f2 (u2 (- x 1) y z) (v2 (- x 1) y z))))))
(assert (forall ((x Int) (y Int) (z Int)) (= (v2 x y z) (ite (<= x 0) z (g2 (u2 (- x 1) y z) (v2 (- x 1) y z))))))
(assert (forall ((x Int)) (= (w2 x) (u2 (h2 x) i2 j2))))
(assert (forall ((x Int)) (= (fast x) (* (w2 x) (ite (<= x 0) 1 (+ 1 (+ 2 (* 2 (* 2 (+ 2 (* 2 (+ 2 2))))))))))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
