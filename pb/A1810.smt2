;; sequence(s): A1810
;; terms: 0 0 0 1 16 200 2400 29400 376320 5080320 72576000 1097712000 17563392000 296821324800 5288816332800 99165306240000 1952793722880000 40311241850880000 870722823979008000 19645683716026368000
;; small program: (((((1 - x) * ((2 - x) * x)) div (1 + 2)) * loop(x * y, x, 1)) div (2 + 2)) div (1 + 2)
;; fast program: (((((1 - x) * ((2 - x) * x)) div (2 + (2 + 2))) * loop(x * y, x, 1)) div (1 + 2)) div 2
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun f1 (Int Int) Int)
(declare-fun g1 (Int) Int)
(declare-fun h1 () Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (* x y))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 1))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (divf (divf (* (divf (* (- 1 x) (* (- 2 x) x)) (+ 1 2)) (v0 x)) (+ 2 2)) (+ 1 2)))))
(assert (forall ((x Int) (y Int)) (= (f1 x y) (* x y))))
(assert (forall ((x Int)) (= (g1 x) x)))
(assert (= h1 1))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v1 x) (u1 (g1 x) h1))))
(assert (forall ((x Int)) (= (fast x) (divf (divf (* (divf (* (- 1 x) (* (- 2 x) x)) (+ 2 (+ 2 2))) (v1 x)) (+ 1 2)) 2))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
