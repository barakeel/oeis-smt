;; sequence(s): A189667
;; terms: 0 1 1 1 1 2 2 3 3 3 4 4 4 5 5 5 5 6 6 7
;; small program: ((((loop(if (1 - (x mod (1 + 2))) <= 0 then (x div (1 + 2)) else x, x, x) + x) mod 2) + 1) + x) div (1 + 2)
;; fast program: ((((loop(if (1 - (x mod (1 + 2))) <= 0 then (x div (1 + 2)) else x, 2 + 2, x) + x) mod 2) + 1) + x) div (1 + 2)
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun f1 (Int) Int)
(declare-fun g1 () Int)
(declare-fun h1 (Int) Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f0 x) (ite (<= (- 1 (modf x (+ 1 2))) 0) (divf x (+ 1 2)) x))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (forall ((x Int)) (= (small x) (divf (+ (+ (modf (+ (v0 x) x) 2) 1) x) (+ 1 2)))))
(assert (forall ((x Int)) (= (f1 x) (ite (<= (- 1 (modf x (+ 1 2))) 0) (divf x (+ 1 2)) x))))
(assert (= g1 (+ 2 2)))
(assert (forall ((x Int)) (= (h1 x) x)))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y))))))
(assert (forall ((x Int)) (= (v1 x) (u1 g1 (h1 x)))))
(assert (forall ((x Int)) (= (fast x) (divf (+ (+ (modf (+ (v1 x) x) 2) 1) x) (+ 1 2)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
