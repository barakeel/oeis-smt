;; sequence(s): A175831
;; terms: 0 1 2 3 5 8 11 16 22 29 38 49 61 76 93 112 134 159 186 217
;; small program: loop((((y * y) - 1) div (2 * (2 + (2 + 2)))) + x, x, x)
;; fast program: ((((((((((2 * (x * x)) - x) * (2 + x)) - x) div (1 + (2 * (2 + 2)))) + 1) + x) div (2 + 2)) + 1) + x) div 2
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (divf (- (* y y) 1) (* 2 (+ 2 (+ 2 2)))) x))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (forall ((x Int)) (= (small x) (v0 x))))
(assert (forall ((x Int)) (= (fast x) (divf (+ (+ (divf (+ (+ (divf (- (* (- (* 2 (* x x)) x) (+ 2 x)) x) (+ 1 (* 2 (+ 2 2)))) 1) x) (+ 2 2)) 1) x) 2))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
