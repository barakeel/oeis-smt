;; sequence(s): A224668
;; terms: 428 542 668 806 956 1118 1292 1478 1676 1886 2108 2342 2588 2846 3116 3398 3692 3998 4316 4646
;; small program: (((((2 * loop(x + y, (2 * (2 + 2)) + x, x)) - 1) - x) * (1 + 2)) * 2) + 2
;; fast program: ((loop((2 + (2 + (2 + x))) * x, 1, 2 + (2 + (2 + x))) * (1 + 2)) - 2) * 2
(set-logic UFNIA)
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun f1 (Int) Int)
(declare-fun g1 () Int)
(declare-fun h1 (Int) Int)
(declare-fun u1 (Int Int) Int)
(declare-fun v1 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ x y))))
(assert (forall ((x Int)) (= (g0 x) (+ (* 2 (+ 2 2)) x))))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (forall ((x Int)) (= (small x) (+ (* (* (- (- (* 2 (v0 x)) 1) x) (+ 1 2)) 2) 2))))
(assert (forall ((x Int)) (= (f1 x) (* (+ 2 (+ 2 (+ 2 x))) x))))
(assert (= g1 1))
(assert (forall ((x Int)) (= (h1 x) (+ 2 (+ 2 (+ 2 x))))))
(assert (forall ((x Int) (y Int)) (= (u1 x y) (ite (<= x 0) y (f1 (u1 (- x 1) y))))))
(assert (forall ((x Int)) (= (v1 x) (u1 g1 (h1 x)))))
(assert (forall ((x Int)) (= (fast x) (* (- (* (v1 x) (+ 1 2)) 2) 2))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
