;; sequence(s): A49008
;; terms: 1 4 3 5 5 6 7 7 8 9 9 10 11 11 12 13 13 14 15 15
;; small program: loop((2 + (y - (x div 2))) - (x div (1 + y)), x, 0) + 1
;; fast program: (((((2 * (x * x)) div (1 + (2 * (2 + 2)))) + x) * (1 + 2)) + 1) div (if x <= 0 then 1 else x)
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (- (+ 2 (- y (divf x 2))) (divf x (+ 1 y))))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 0))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (+ (v0 x) 1))))
(assert (forall ((x Int)) (= (fast x) (divf (+ (* (+ (divf (* 2 (* x x)) (+ 1 (* 2 (+ 2 2)))) x) (+ 1 2)) 1) (ite (<= x 0) 1 x)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
