;; sequence(s): A327137
;; terms: 7 10 13 16 29 32 35 38 51 54 57 60 73 76 79 82 95 98 101 104
;; small program: (1 + (2 * (loop2(x + y, x, 2 + 2, x div (2 + 2), 1) + x))) + x
;; fast program: (1 + (2 * (2 + (((1 + (2 + 2)) * (x div (2 + 2))) + x)))) + (2 + x)
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun i0 (Int) Int)
(declare-fun j0 () Int)
(declare-fun u0 (Int Int Int) Int)
(declare-fun v0 (Int Int Int) Int)
(declare-fun w0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ x y))))
(assert (forall ((x Int)) (= (g0 x) x)))
(assert (= h0 (+ 2 2)))
(assert (forall ((x Int)) (= (i0 x) (divf x (+ 2 2)))))
(assert (= j0 1))
(assert (forall ((x Int) (y Int) (z Int)) (= (u0 x y z) (ite (<= x 0) y (f0 (u0 (- x 1) y z) (v0 (- x 1) y z))))))
(assert (forall ((x Int) (y Int) (z Int)) (= (v0 x y z) (ite (<= x 0) z (g0 (u0 (- x 1) y z))))))
(assert (forall ((x Int)) (= (w0 x) (u0 h0 (i0 x) j0))))
(assert (forall ((x Int)) (= (small x) (+ (+ 1 (* 2 (+ (w0 x) x))) x))))
(assert (forall ((x Int)) (= (fast x) (+ (+ 1 (* 2 (+ 2 (+ (* (+ 1 (+ 2 2)) (divf x (+ 2 2))) x)))) (+ 2 x)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
