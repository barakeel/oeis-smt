;; sequence(s): A147601
;; terms: 7 4 21 8 35 12 49 16 63 20 77 24 91 28 105 32 119 36 133 40
;; small program: (1 + (if (x mod 2) <= 0 then (2 + (2 + 2)) else 1)) * (1 + x)
;; fast program: loop(1 + (2 + (2 + 2)), 1 - (x mod 2), 2) * (1 + x)
(set-logic UFNIA)
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun small (Int) Int)
(declare-fun f0 () Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (small x) (* (+ 1 (ite (<= (modf x 2) 0) (+ 2 (+ 2 2)) 1)) (+ 1 x)))))
(assert (= f0 (+ 1 (+ 2 (+ 2 2)))))
(assert (forall ((x Int)) (= (g0 x) (- 1 (modf x 2)))))
(assert (= h0 2))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y f0))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (fast x) (* (v0 x) (+ 1 x)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
