;; sequence(s): A258588
;; terms: 1 11 16 22 27 33 38 44 49 55 60 66 71 77 82 88 93 99 104 110
;; small program: (if x <= 0 then 1 else loop(((x * y) + x) + y, 2, x)) - (x div 2)
;; fast program: (((1 + x) * (if x <= 0 then 1 else (1 + (2 + 2)))) - (x div 2)) + x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (+ (* x y) x) y))))
(assert (= g0 2))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 g0 (h0 x)))))
(assert (forall ((x Int)) (= (small x) (- (ite (<= x 0) 1 (v0 x)) (divf x 2)))))
(assert (forall ((x Int)) (= (fast x) (+ (- (* (+ 1 x) (ite (<= x 0) 1 (+ 1 (+ 2 2)))) (divf x 2)) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
