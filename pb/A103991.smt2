;; sequence(s): A103991
;; terms: 3 5 21 9 11 39 15 17 57 21 23 75 27 29 93 33 35 111 39 41
;; small program: (1 + (2 + (x + x))) * (1 + (((x * x) - x) mod (1 + 2)))
;; fast program: 1 + loop(2 + ((x + x) + x), (x mod (1 + 2)) - 1, 2 + (x + x))
(set-logic UFNIA)
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun small (Int) Int)
(declare-fun f0 (Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (small x) (* (+ 1 (+ 2 (+ x x))) (+ 1 (modf (- (* x x) x) (+ 1 2)))))))
(assert (forall ((x Int)) (= (f0 x) (+ 2 (+ (+ x x) x)))))
(assert (forall ((x Int)) (= (g0 x) (- (modf x (+ 1 2)) 1))))
(assert (forall ((x Int)) (= (h0 x) (+ 2 (+ x x)))))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (forall ((x Int)) (= (fast x) (+ 1 (v0 x)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
