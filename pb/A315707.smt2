;; sequence(s): A315707
;; terms: 1 6 12 17 23 29 35 41 46 52 58 64 70 75 81 87 93 99 104 110
;; small program: (loop(((x div (2 + (2 + 2))) + y) + y, x + x, 0) + 1) + x
;; fast program: (if x <= 0 then 1 else ((2 - x) div (1 + (2 + 2)))) + (2 * ((x + x) + x))
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(declare-fun f0 (Int Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int) (y Int)) (= (f0 x y) (+ (+ (divf x (+ 2 (+ 2 2))) y) y))))
(assert (forall ((x Int)) (= (g0 x) (+ x x))))
(assert (= h0 0))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y) x)))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) h0))))
(assert (forall ((x Int)) (= (small x) (+ (+ (v0 x) 1) x))))
(assert (forall ((x Int)) (= (fast x) (+ (ite (<= x 0) 1 (divf (- 2 x) (+ 1 (+ 2 2)))) (* 2 (+ (+ x x) x))))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
