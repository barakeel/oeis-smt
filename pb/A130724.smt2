;; sequence(s): A130724
;; terms: 0 3 6 1 12 15 2 21 24 3 30 33 4 39 42 5 48 51 6 57
;; small program: if (x mod (1 + 2)) <= 0 then (x div (1 + 2)) else ((x + x) + x)
;; fast program: ((loop(x div (1 + 2), 1 - (x mod (1 + 2)), x) * 2) * 2) - x
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun small (Int) Int)
(declare-fun f0 (Int) Int)
(declare-fun g0 (Int) Int)
(declare-fun h0 (Int) Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (small x) (ite (<= (modf x (+ 1 2)) 0) (divf x (+ 1 2)) (+ (+ x x) x)))))
(assert (forall ((x Int)) (= (f0 x) (divf x (+ 1 2)))))
(assert (forall ((x Int)) (= (g0 x) (- 1 (modf x (+ 1 2))))))
(assert (forall ((x Int)) (= (h0 x) x)))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (forall ((x Int)) (= (v0 x) (u0 (g0 x) (h0 x)))))
(assert (forall ((x Int)) (= (fast x) (- (* (* (v0 x) 2) 2) x))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
