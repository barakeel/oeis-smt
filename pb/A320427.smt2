;; sequence(s): A320427
;; terms: 11 13 14 16 17 19 21 23 24 26 27 29 31 33 34 36 37 39 41 43
;; small program: (((1 + (2 * (loop(x * x, 2, 2) - (x div 2)))) div (1 + 2)) + x) + x
;; fast program: (1 + (2 + (2 * (2 + 2)))) + (((((x mod 2) + x) + x) div (1 + 2)) + x)
(set-logic UFNIA)
(define-fun divf ((a Int) (b Int)) Int (ite (< 0 b) (div a b) (div (- a) (- b))))
(define-fun modf ((a Int) (b Int)) Int (ite (< 0 b) (mod a b) (- (mod (- a) (- b)))))
(declare-fun f0 (Int) Int)
(declare-fun g0 () Int)
(declare-fun h0 () Int)
(declare-fun u0 (Int Int) Int)
(declare-fun v0 () Int)
(declare-fun small (Int) Int)
(declare-fun fast (Int) Int)
(assert (forall ((x Int)) (= (f0 x) (* x x))))
(assert (= g0 2))
(assert (= h0 2))
(assert (forall ((x Int) (y Int)) (= (u0 x y) (ite (<= x 0) y (f0 (u0 (- x 1) y))))))
(assert (= v0 (u0 g0 h0)))
(assert (forall ((x Int)) (= (small x) (+ (+ (divf (+ 1 (* 2 (- v0 (divf x 2)))) (+ 1 2)) x) x))))
(assert (forall ((x Int)) (= (fast x) (+ (+ 1 (+ 2 (* 2 (+ 2 2)))) (+ (divf (+ (+ (modf x 2) x) x) (+ 1 2)) x)))))
(assert (exists ((c Int)) (and (>= c 0) (not (= (small c) (fast c))))))
(check-sat)
